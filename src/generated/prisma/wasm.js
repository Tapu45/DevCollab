
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  features: 'features',
  isActive: 'isActive',
  stripePriceId: 'stripePriceId',
  maxProjects: 'maxProjects',
  maxConnections: 'maxConnections',
  maxTeamMembers: 'maxTeamMembers',
  hasAdvancedAI: 'hasAdvancedAI',
  hasAnalytics: 'hasAnalytics',
  hasPrioritySupport: 'hasPrioritySupport',
  hasApiAccess: 'hasApiAccess',
  dailyRefreshLimit: 'dailyRefreshLimit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  nextBillingDate: 'nextBillingDate',
  gracePeriodEnd: 'gracePeriodEnd',
  lastPaymentDate: 'lastPaymentDate',
  failedPaymentCount: 'failedPaymentCount',
  autoRenew: 'autoRenew',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paidAt: 'paidAt',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  emailVerified: 'emailVerified',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  profilePictureUrl: 'profilePictureUrl',
  bio: 'bio',
  location: 'location',
  timezone: 'timezone',
  website: 'website',
  githubUrl: 'githubUrl',
  linkedinUrl: 'linkedinUrl',
  role: 'role',
  accountType: 'accountType',
  isActive: 'isActive',
  isBanned: 'isBanned',
  bannedUntil: 'bannedUntil',
  banReason: 'banReason',
  profileVisibility: 'profileVisibility',
  showEmail: 'showEmail',
  showLocation: 'showLocation',
  allowMessages: 'allowMessages',
  reputationScore: 'reputationScore',
  totalContributions: 'totalContributions',
  profileCompleted: 'profileCompleted',
  isOnline: 'isOnline',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSuggestionCacheScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectIdeas: 'projectIdeas',
  skillSuggestions: 'skillSuggestions',
  lastGenerated: 'lastGenerated',
  isValid: 'isValid'
};

exports.Prisma.UserSimilarCacheScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  data: 'data',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentSection: 'currentSection',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ExternalProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  username: 'username',
  url: 'url',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExternalProfileStatsScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  provider: 'provider',
  statsType: 'statsType',
  value: 'value',
  metadata: 'metadata',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.AccountStatsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  provider: 'provider',
  statsType: 'statsType',
  value: 'value',
  metadata: 'metadata',
  lastUpdated: 'lastUpdated',
  userId: 'userId'
};

exports.Prisma.LinkedInProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  linkedinId: 'linkedinId',
  firstName: 'firstName',
  lastName: 'lastName',
  headline: 'headline',
  summary: 'summary',
  industry: 'industry',
  location: 'location',
  profilePictureUrl: 'profilePictureUrl',
  bannerPictureUrl: 'bannerPictureUrl',
  publicProfileUrl: 'publicProfileUrl',
  vanityName: 'vanityName',
  isActive: 'isActive',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInExperienceScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  experienceId: 'experienceId',
  title: 'title',
  companyName: 'companyName',
  companyId: 'companyId',
  location: 'location',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  companyLogoUrl: 'companyLogoUrl',
  companyUrl: 'companyUrl',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInEducationScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  educationId: 'educationId',
  schoolName: 'schoolName',
  schoolId: 'schoolId',
  degree: 'degree',
  fieldOfStudy: 'fieldOfStudy',
  startDate: 'startDate',
  endDate: 'endDate',
  grade: 'grade',
  activities: 'activities',
  description: 'description',
  schoolLogoUrl: 'schoolLogoUrl',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInSkillScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  skillId: 'skillId',
  name: 'name',
  endorsements: 'endorsements',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInConnectionScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  connectionId: 'connectionId',
  firstName: 'firstName',
  lastName: 'lastName',
  headline: 'headline',
  profilePictureUrl: 'profilePictureUrl',
  publicProfileUrl: 'publicProfileUrl',
  industry: 'industry',
  location: 'location',
  isActive: 'isActive',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInPostScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  postId: 'postId',
  text: 'text',
  authorName: 'authorName',
  authorHeadline: 'authorHeadline',
  authorProfileUrl: 'authorProfileUrl',
  authorPictureUrl: 'authorPictureUrl',
  postType: 'postType',
  mediaUrls: 'mediaUrls',
  articleUrl: 'articleUrl',
  articleTitle: 'articleTitle',
  articleDescription: 'articleDescription',
  articleImageUrl: 'articleImageUrl',
  likesCount: 'likesCount',
  commentsCount: 'commentsCount',
  sharesCount: 'sharesCount',
  publishedAt: 'publishedAt',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInActivityScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  type: 'type',
  action: 'action',
  title: 'title',
  description: 'description',
  url: 'url',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.LinkedInCompanyScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  industry: 'industry',
  companySize: 'companySize',
  website: 'website',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl',
  location: 'location',
  foundedYear: 'foundedYear',
  employeeCount: 'employeeCount',
  followersCount: 'followersCount',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  device: 'device',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  isActive: 'isActive',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionActivityScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  osName: 'osName',
  osVersion: 'osVersion',
  browserName: 'browserName',
  browserVersion: 'browserVersion',
  isTrusted: 'isTrusted',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  category: 'category',
  proficiencyLevel: 'proficiencyLevel',
  isVerified: 'isVerified',
  yearsExperience: 'yearsExperience',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EndorsementScalarFieldEnum = {
  id: 'id',
  skillId: 'skillId',
  giverId: 'giverId',
  message: 'message',
  receiverId: 'receiverId',
  createdAt: 'createdAt'
};

exports.Prisma.ExperienceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  company: 'company',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  responsibilities: 'responsibilities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institution: 'institution',
  degree: 'degree',
  fieldOfStudy: 'fieldOfStudy',
  startDate: 'startDate',
  endDate: 'endDate',
  grade: 'grade',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  shortDesc: 'shortDesc',
  ownerId: 'ownerId',
  status: 'status',
  visibility: 'visibility',
  techStack: 'techStack',
  categories: 'categories',
  tags: 'tags',
  difficultyLevel: 'difficultyLevel',
  estimatedHours: 'estimatedHours',
  maxCollaborators: 'maxCollaborators',
  githubUrl: 'githubUrl',
  liveUrl: 'liveUrl',
  designUrl: 'designUrl',
  documentUrl: 'documentUrl',
  thumbnailUrl: 'thumbnailUrl',
  images: 'images',
  isRecruiting: 'isRecruiting',
  recruitmentMsg: 'recruitmentMsg',
  requiredSkills: 'requiredSkills',
  preferredTimezone: 'preferredTimezone',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  forkCount: 'forkCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectCollaboratorScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assigneeId: 'assigneeId',
  creatorId: 'creatorId',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  tags: 'tags',
  labels: 'labels',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  status: 'status',
  type: 'type',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConnectionPrivacyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  connectionPrivacyLevel: 'connectionPrivacyLevel',
  connectionRequestLevel: 'connectionRequestLevel',
  hideConnections: 'hideConnections',
  autoDeclineRequests: 'autoDeclineRequests',
  blockedUserIds: 'blockedUserIds',
  profileVisibility: 'profileVisibility',
  allowMessages: 'allowMessages',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  emoji: 'emoji',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReadScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.ChatSettingsScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  allowFileSharing: 'allowFileSharing',
  allowReactions: 'allowReactions',
  allowPolls: 'allowPolls',
  muteNotifications: 'muteNotifications',
  autoDeleteAfter: 'autoDeleteAfter',
  maxParticipants: 'maxParticipants',
  isPublic: 'isPublic',
  inviteCode: 'inviteCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  projectId: 'projectId',
  isActive: 'isActive',
  lastMessageId: 'lastMessageId',
  lastMessageAt: 'lastMessageAt',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatParticipantScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive',
  isAdmin: 'isAdmin'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  type: 'type',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  attachments: 'attachments',
  replyToId: 'replyToId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  category: 'category',
  points: 'points',
  isActive: 'isActive',
  criteria: 'criteria',
  createdAt: 'createdAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.ForumCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  color: 'color',
  icon: 'icon',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  slug: 'slug',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  replyCount: 'replyCount',
  isPinned: 'isPinned',
  isLocked: 'isLocked',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumReplyScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  organizerId: 'organizerId',
  startDate: 'startDate',
  endDate: 'endDate',
  timezone: 'timezone',
  location: 'location',
  virtualLink: 'virtualLink',
  isVirtual: 'isVirtual',
  maxAttendees: 'maxAttendees',
  agenda: 'agenda',
  requirements: 'requirements',
  tags: 'tags',
  bannerUrl: 'bannerUrl',
  thumbnailUrl: 'thumbnailUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventParticipantScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  status: 'status',
  registeredAt: 'registeredAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  priority: 'priority',
  category: 'category',
  isRead: 'isRead',
  readAt: 'readAt',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  senderId: 'senderId',
  expiresAt: 'expiresAt',
  scheduledAt: 'scheduledAt',
  deliveredAt: 'deliveredAt',
  deliveryMethod: 'deliveryMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category',
  inAppEnabled: 'inAppEnabled',
  emailEnabled: 'emailEnabled',
  pushEnabled: 'pushEnabled',
  smsEnabled: 'smsEnabled',
  digestFrequency: 'digestFrequency',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  priority: 'priority',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  reportedId: 'reportedId',
  type: 'type',
  reason: 'reason',
  details: 'details',
  status: 'status',
  adminNotes: 'adminNotes',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  key: 'key',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.PlatformStatsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  newUsers: 'newUsers',
  totalProjects: 'totalProjects',
  activeProjects: 'activeProjects',
  newProjects: 'newProjects',
  totalConnections: 'totalConnections',
  newConnections: 'newConnections',
  totalMessages: 'totalMessages',
  newMessages: 'newMessages',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.LeetCodeQuestionScalarFieldEnum = {
  id: 'id',
  leetcodeId: 'leetcodeId',
  url: 'url',
  title: 'title',
  difficulty: 'difficulty',
  acceptance: 'acceptance',
  frequency: 'frequency',
  companyId: 'companyId',
  timeCategories: 'timeCategories'
};

exports.Prisma.UserQuestionProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  status: 'status',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubAppInstallationScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  installationId: 'installationId',
  githubAccountId: 'githubAccountId',
  accountLogin: 'accountLogin',
  accountType: 'accountType',
  permissions: 'permissions',
  events: 'events',
  accessTokensUrl: 'accessTokensUrl',
  repositoriesUrl: 'repositoriesUrl',
  htmlUrl: 'htmlUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubRepositoryScalarFieldEnum = {
  id: 'id',
  installationId: 'installationId',
  repoId: 'repoId',
  name: 'name',
  fullName: 'fullName',
  description: 'description',
  private: 'private',
  htmlUrl: 'htmlUrl',
  cloneUrl: 'cloneUrl',
  sshUrl: 'sshUrl',
  defaultBranch: 'defaultBranch',
  language: 'language',
  languages: 'languages',
  topics: 'topics',
  stargazersCount: 'stargazersCount',
  watchersCount: 'watchersCount',
  forksCount: 'forksCount',
  openIssuesCount: 'openIssuesCount',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pushedAt: 'pushedAt',
  lastSynced: 'lastSynced'
};

exports.Prisma.GitHubCommitScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  sha: 'sha',
  message: 'message',
  authorName: 'authorName',
  authorEmail: 'authorEmail',
  authorDate: 'authorDate',
  committerName: 'committerName',
  committerEmail: 'committerEmail',
  committerDate: 'committerDate',
  htmlUrl: 'htmlUrl',
  stats: 'stats',
  files: 'files',
  createdAt: 'createdAt'
};

exports.Prisma.GitHubIssueScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  issueNumber: 'issueNumber',
  title: 'title',
  body: 'body',
  state: 'state',
  author: 'author',
  assignees: 'assignees',
  labels: 'labels',
  milestone: 'milestone',
  htmlUrl: 'htmlUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt',
  lastSynced: 'lastSynced'
};

exports.Prisma.GitHubPullRequestScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  prNumber: 'prNumber',
  title: 'title',
  body: 'body',
  state: 'state',
  author: 'author',
  assignees: 'assignees',
  reviewers: 'reviewers',
  labels: 'labels',
  milestone: 'milestone',
  baseBranch: 'baseBranch',
  headBranch: 'headBranch',
  htmlUrl: 'htmlUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt',
  mergedAt: 'mergedAt',
  lastSynced: 'lastSynced'
};

exports.Prisma.GitHubWebhookScalarFieldEnum = {
  id: 'id',
  installationId: 'installationId',
  repositoryId: 'repositoryId',
  webhookId: 'webhookId',
  name: 'name',
  events: 'events',
  config: 'config',
  isActive: 'isActive',
  lastDelivery: 'lastDelivery',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubWebhookDeliveryScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  deliveryId: 'deliveryId',
  payload: 'payload',
  createdAt: 'createdAt',
  processed: 'processed'
};

exports.Prisma.GitHubActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  action: 'action',
  repository: 'repository',
  title: 'title',
  description: 'description',
  url: 'url',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  UNPAID: 'UNPAID',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED',
  EXPIRED: 'EXPIRED',
  GRACE_PERIOD: 'GRACE_PERIOD'
};

exports.PlanType = exports.$Enums.PlanType = {
  FREE: 'FREE',
  BASIC: 'BASIC',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.AccountType = exports.$Enums.AccountType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY',
  EDUCATIONAL: 'EDUCATIONAL'
};

exports.SkillCategory = exports.$Enums.SkillCategory = {
  PROGRAMMING_LANGUAGE: 'PROGRAMMING_LANGUAGE',
  FRAMEWORK: 'FRAMEWORK',
  DATABASE: 'DATABASE',
  CLOUD_PLATFORM: 'CLOUD_PLATFORM',
  DEVOPS_TOOL: 'DEVOPS_TOOL',
  DESIGN_TOOL: 'DESIGN_TOOL',
  PROJECT_MANAGEMENT: 'PROJECT_MANAGEMENT',
  SOFT_SKILL: 'SOFT_SKILL',
  OTHER: 'OTHER'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.ProjectVisibility = exports.$Enums.ProjectVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY'
};

exports.CollaboratorRole = exports.$Enums.CollaboratorRole = {
  OWNER: 'OWNER',
  CO_OWNER: 'CO_OWNER',
  DEVELOPER: 'DEVELOPER',
  DESIGNER: 'DESIGNER',
  TESTER: 'TESTER',
  MENTOR: 'MENTOR',
  VIEWER: 'VIEWER'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  IN_REVIEW: 'IN_REVIEW',
  DONE: 'DONE',
  CANCELLED: 'CANCELLED'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  BLOCKED: 'BLOCKED'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  COLLABORATOR: 'COLLABORATOR',
  MENTOR: 'MENTOR',
  MENTEE: 'MENTEE',
  FRIEND: 'FRIEND',
  COLLEAGUE: 'COLLEAGUE',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.ConnectionPrivacyLevel = exports.$Enums.ConnectionPrivacyLevel = {
  EVERYONE: 'EVERYONE',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY',
  MUTUAL_CONNECTIONS: 'MUTUAL_CONNECTIONS',
  NOBODY: 'NOBODY'
};

exports.ConnectionRequestLevel = exports.$Enums.ConnectionRequestLevel = {
  EVERYONE: 'EVERYONE',
  VERIFIED_ONLY: 'VERIFIED_ONLY',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY',
  NOBODY: 'NOBODY'
};

exports.ChatType = exports.$Enums.ChatType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP',
  PROJECT: 'PROJECT'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  CODE: 'CODE',
  SYSTEM: 'SYSTEM',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  LOCATION: 'LOCATION',
  CONTACT: 'CONTACT',
  POLL: 'POLL',
  REACTION: 'REACTION'
};

exports.EventType = exports.$Enums.EventType = {
  HACKATHON: 'HACKATHON',
  MEETUP: 'MEETUP',
  WORKSHOP: 'WORKSHOP',
  WEBINAR: 'WEBINAR',
  CONFERENCE: 'CONFERENCE',
  NETWORKING: 'NETWORKING'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ParticipantStatus = exports.$Enums.ParticipantStatus = {
  REGISTERED: 'REGISTERED',
  CONFIRMED: 'CONFIRMED',
  ATTENDED: 'ATTENDED',
  NO_SHOW: 'NO_SHOW',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  CONNECTION_REQUEST: 'CONNECTION_REQUEST',
  CONNECTION_ACCEPTED: 'CONNECTION_ACCEPTED',
  CONNECTION_DECLINED: 'CONNECTION_DECLINED',
  CONNECTION_BLOCKED: 'CONNECTION_BLOCKED',
  PROJECT_INVITATION: 'PROJECT_INVITATION',
  PROJECT_JOINED: 'PROJECT_JOINED',
  PROJECT_LEFT: 'PROJECT_LEFT',
  PROJECT_UPDATED: 'PROJECT_UPDATED',
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  TASK_COMPLETED: 'TASK_COMPLETED',
  TASK_COMMENTED: 'TASK_COMMENTED',
  TASK_DUE_SOON: 'TASK_DUE_SOON',
  COMMENT_ADDED: 'COMMENT_ADDED',
  MESSAGE_RECEIVED: 'MESSAGE_RECEIVED',
  MESSAGE_MENTIONED: 'MESSAGE_MENTIONED',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  EVENT_REMINDER: 'EVENT_REMINDER',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  PROFILE_VIEWED: 'PROFILE_VIEWED'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationCategory = exports.$Enums.NotificationCategory = {
  CONNECTION: 'CONNECTION',
  PROJECT: 'PROJECT',
  TASK: 'TASK',
  MESSAGE: 'MESSAGE',
  ACHIEVEMENT: 'ACHIEVEMENT',
  SYSTEM: 'SYSTEM',
  EVENT: 'EVENT'
};

exports.NotificationDeliveryMethod = exports.$Enums.NotificationDeliveryMethod = {
  IN_APP: 'IN_APP',
  EMAIL: 'EMAIL',
  PUSH: 'PUSH',
  SMS: 'SMS'
};

exports.DigestFrequency = exports.$Enums.DigestFrequency = {
  IMMEDIATE: 'IMMEDIATE',
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  NEVER: 'NEVER'
};

exports.ReportType = exports.$Enums.ReportType = {
  SPAM: 'SPAM',
  HARASSMENT: 'HARASSMENT',
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  FAKE_PROFILE: 'FAKE_PROFILE',
  COPYRIGHT_VIOLATION: 'COPYRIGHT_VIOLATION',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED'
};

exports.TimeCategory = exports.$Enums.TimeCategory = {
  ALL: 'ALL',
  THIRTY_DAYS: 'THIRTY_DAYS',
  THREE_MONTHS: 'THREE_MONTHS',
  SIX_MONTHS: 'SIX_MONTHS',
  MORE_THAN_SIX_MONTHS: 'MORE_THAN_SIX_MONTHS'
};

exports.QuestionStatus = exports.$Enums.QuestionStatus = {
  UNSOLVED: 'UNSOLVED',
  ATTEMPTED: 'ATTEMPTED',
  SOLVED: 'SOLVED',
  BOOKMARKED: 'BOOKMARKED'
};

exports.Prisma.ModelName = {
  Plan: 'Plan',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  User: 'User',
  UserSuggestionCache: 'UserSuggestionCache',
  UserSimilarCache: 'UserSimilarCache',
  ProfileProgress: 'ProfileProgress',
  Account: 'Account',
  ExternalProfile: 'ExternalProfile',
  ExternalProfileStats: 'ExternalProfileStats',
  AccountStats: 'AccountStats',
  LinkedInProfile: 'LinkedInProfile',
  LinkedInExperience: 'LinkedInExperience',
  LinkedInEducation: 'LinkedInEducation',
  LinkedInSkill: 'LinkedInSkill',
  LinkedInConnection: 'LinkedInConnection',
  LinkedInPost: 'LinkedInPost',
  LinkedInActivity: 'LinkedInActivity',
  LinkedInCompany: 'LinkedInCompany',
  Session: 'Session',
  SessionActivity: 'SessionActivity',
  UserDevice: 'UserDevice',
  VerificationToken: 'VerificationToken',
  Skill: 'Skill',
  Endorsement: 'Endorsement',
  Experience: 'Experience',
  Education: 'Education',
  Project: 'Project',
  ProjectCollaborator: 'ProjectCollaborator',
  Task: 'Task',
  Milestone: 'Milestone',
  Comment: 'Comment',
  Connection: 'Connection',
  ConnectionPrivacy: 'ConnectionPrivacy',
  MessageReaction: 'MessageReaction',
  MessageRead: 'MessageRead',
  ChatSettings: 'ChatSettings',
  Chat: 'Chat',
  ChatParticipant: 'ChatParticipant',
  Message: 'Message',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  ForumCategory: 'ForumCategory',
  ForumPost: 'ForumPost',
  ForumReply: 'ForumReply',
  Event: 'Event',
  EventParticipant: 'EventParticipant',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  NotificationTemplate: 'NotificationTemplate',
  Report: 'Report',
  ApiKey: 'ApiKey',
  UserActivity: 'UserActivity',
  PlatformStats: 'PlatformStats',
  Company: 'Company',
  LeetCodeQuestion: 'LeetCodeQuestion',
  UserQuestionProgress: 'UserQuestionProgress',
  GitHubAppInstallation: 'GitHubAppInstallation',
  GitHubRepository: 'GitHubRepository',
  GitHubCommit: 'GitHubCommit',
  GitHubIssue: 'GitHubIssue',
  GitHubPullRequest: 'GitHubPullRequest',
  GitHubWebhook: 'GitHubWebhook',
  GitHubWebhookDelivery: 'GitHubWebhookDelivery',
  GitHubActivity: 'GitHubActivity'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/rameswar-panda/Desktop/devcollab/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x"
      },
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-1.0.x"
      },
      {
        "fromEnvVar": null,
        "value": "linux-musl-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/rameswar-panda/Desktop/devcollab/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"../src/generated/prisma\"\n  binaryTargets = [\"native\", \"debian-openssl-3.0.x\", \"rhel-openssl-1.0.x\", \"linux-musl-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ============================================================================\n// SUBSCRIPTION & BILLING MODELS (SaaS Core)\n// ============================================================================\n\nenum SubscriptionStatus {\n  TRIAL\n  ACTIVE\n  PAST_DUE\n  CANCELED\n  UNPAID\n  INCOMPLETE\n  INCOMPLETE_EXPIRED\n  EXPIRED\n  GRACE_PERIOD\n}\n\nenum PlanType {\n  FREE\n  BASIC\n  PRO\n  ENTERPRISE\n}\n\nmodel Plan {\n  id            String   @id @default(cuid())\n  name          String\n  description   String?\n  type          PlanType @unique\n  price         Decimal  @db.Money\n  currency      String   @default(\"USD\")\n  interval      String // monthly, yearly\n  features      Json // Array of features\n  isActive      Boolean  @default(true)\n  stripePriceId String?  @unique\n\n  // Limits for each plan\n  maxProjects        Int     @default(5)\n  maxConnections     Int     @default(100)\n  maxTeamMembers     Int     @default(5)\n  hasAdvancedAI      Boolean @default(false)\n  hasAnalytics       Boolean @default(false)\n  hasPrioritySupport Boolean @default(false)\n  hasApiAccess       Boolean @default(false)\n\n  dailyRefreshLimit Int @default(3)\n\n  subscriptions Subscription[]\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n\n  @@map(\"plans\")\n}\n\nmodel Subscription {\n  id                   String             @id @default(cuid())\n  userId               String             @unique\n  planId               String\n  status               SubscriptionStatus\n  stripeCustomerId     String?\n  stripeSubscriptionId String?            @unique\n  currentPeriodStart   DateTime?\n  currentPeriodEnd     DateTime?\n  cancelAtPeriodEnd    Boolean            @default(false)\n  canceledAt           DateTime?\n  trialStart           DateTime?\n  trialEnd             DateTime?\n\n  // New fields for monthly billing\n  nextBillingDate    DateTime? // When the next payment is due\n  gracePeriodEnd     DateTime? // End of grace period for failed payments\n  lastPaymentDate    DateTime? // When the last successful payment was made\n  failedPaymentCount Int       @default(0) // Track failed payment attempts\n  autoRenew          Boolean   @default(true) // Whether subscription auto-renews\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  plan Plan @relation(fields: [planId], references: [id])\n\n  invoices Invoice[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"subscriptions\")\n}\n\nmodel Invoice {\n  id              String    @id @default(cuid())\n  subscriptionId  String\n  stripeInvoiceId String?   @unique\n  amount          Decimal   @db.Money\n  currency        String\n  status          String\n  paidAt          DateTime?\n  dueDate         DateTime?\n\n  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"invoices\")\n}\n\n// ============================================================================\n// CORE USER & AUTHENTICATION MODELS\n// ============================================================================\n\nenum UserRole {\n  USER\n  ADMIN\n  MODERATOR\n}\n\nenum AccountType {\n  INDIVIDUAL\n  COMPANY\n  EDUCATIONAL\n}\n\nmodel User {\n  id                String            @id @default(cuid())\n  email             String            @unique\n  username          String            @unique\n  emailVerified     DateTime?\n  passwordHash      String?\n  firstName         String?\n  lastName          String?\n  displayName       String?\n  profilePictureUrl String?\n  bio               String?\n  location          String?\n  timezone          String?\n  website           String?\n  githubUrl         String?\n  linkedinUrl       String?\n  externalProfiles  ExternalProfile[]\n  accountStats      AccountStats[]\n\n  githubActivities GitHubActivity[]\n\n  linkedinProfile LinkedInProfile?\n\n  // Account settings\n  role        UserRole    @default(USER)\n  accountType AccountType @default(INDIVIDUAL)\n  isActive    Boolean     @default(true)\n  isBanned    Boolean     @default(false)\n  bannedUntil DateTime?\n  banReason   String?\n\n  // Privacy settings\n  profileVisibility String  @default(\"PUBLIC\") // PUBLIC, PRIVATE, CONNECTIONS_ONLY\n  showEmail         Boolean @default(false)\n  showLocation      Boolean @default(true)\n  allowMessages     Boolean @default(true)\n\n  // Gamification\n  reputationScore    Int                    @default(0)\n  totalContributions Int                    @default(0)\n  questionProgress   UserQuestionProgress[]\n  profileCompleted   Boolean                @default(false)\n\n  // Relations\n  accounts     Account[]\n  sessions     Session[]\n  subscription Subscription?\n  skills       Skill[]\n  experiences  Experience[] // <-- Added back-relation\n  educations   Education[] // <-- Added back-relation\n\n  ownedProjects           Project[]                @relation(\"ProjectOwner\")\n  projectCollaborations   ProjectCollaborator[]\n  sentConnections         Connection[]             @relation(\"ConnectionSender\")\n  receivedConnections     Connection[]             @relation(\"ConnectionReceiver\")\n  sentMessages            Message[]                @relation(\"MessageSender\")\n  receivedMessages        Message[]                @relation(\"MessageReceiver\")\n  chatParticipants        ChatParticipant[]\n  taskAssignments         Task[]                   @relation(\"TaskAssignee\")\n  createdTasks            Task[]                   @relation(\"TaskCreator\")\n  comments                Comment[]\n  achievements            UserAchievement[]\n  endorsements            Endorsement[]            @relation(\"EndorsementGiver\")\n  receivedEndorsements    Endorsement[]            @relation(\"EndorsementReceiver\")\n  forumPosts              ForumPost[]\n  forumReplies            ForumReply[]\n  eventParticipations     EventParticipant[]\n  createdEvents           Event[]\n  reports                 Report[]                 @relation(\"ReportCreator\")\n  reportedBy              Report[]                 @relation(\"ReportedUser\")\n  apiKeys                 ApiKey[]\n  suggestionCache         UserSuggestionCache?\n  similarCache            UserSimilarCache?\n  profileProgress         ProfileProgress?\n  connectionPrivacy       ConnectionPrivacy?\n  sentNotifications       Notification[]           @relation(\"NotificationSender\")\n  receivedNotifications   Notification[]           @relation(\"NotificationReceiver\")\n  notificationPreferences NotificationPreference[]\n  messageReactions        MessageReaction[]\n  messageReads            MessageRead[]\n\n  isOnline Boolean   @default(false)\n  lastSeen DateTime?\n\n  sessionActivities SessionActivity[]\n  devices           UserDevice[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"users\")\n}\n\nmodel UserSuggestionCache {\n  id               String   @id @default(cuid())\n  userId           String   @unique\n  projectIdeas     Json // Array of generated project suggestions\n  skillSuggestions Json // Skill roadmap and suggestions\n  lastGenerated    DateTime @default(now())\n  isValid          Boolean  @default(true)\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_suggestion_cache\")\n}\n\nmodel UserSimilarCache {\n  id        String   @id @default(cuid())\n  userId    String   @unique\n  data      Json // Stores the cached response data (e.g., { users: [...], total: N })\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_similar_cache\")\n}\n\nmodel ProfileProgress {\n  id             String   @id @default(cuid())\n  userId         String   @unique\n  currentSection String // \"basic\", \"education\", \"experience\", \"project\", \"skills\"\n  lastUpdated    DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"profile_progress\")\n}\n\nmodel Account {\n  id                  String                  @id @default(cuid())\n  userId              String\n  type                String\n  provider            String\n  providerAccountId   String\n  refresh_token       String?\n  access_token        String?\n  expires_at          Int?\n  token_type          String?\n  scope               String?\n  id_token            String?\n  session_state       String?\n  stats               AccountStats[]\n  githubInstallations GitHubAppInstallation[]\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"accounts\")\n}\n\n// Add this new model:\nmodel ExternalProfile {\n  id           String   @id @default(cuid())\n  userId       String\n  provider     String // e.g., \"leetcode\", \"behance\", \"devto\", \"codeforces\", \"codechef\", \"dribbble\", \"hashnode\", \"stackoverflow\"\n  username     String\n  url          String?\n  accessToken  String?\n  refreshToken String?\n  expiresAt    Int?\n  metadata     Json?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  user  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  stats ExternalProfileStats[]\n\n  @@unique([userId, provider])\n  @@map(\"external_profiles\")\n}\n\nmodel ExternalProfileStats {\n  id          String   @id @default(cuid())\n  profileId   String\n  provider    String // \"github\", \"gitlab\", \"linkedin\", \"leetcode\", etc.\n  statsType   String // \"repositories\", \"followers\", \"following\", \"stars\", \"commits\", \"leetcode_solved\", etc.\n  value       Int\n  metadata    Json? // Additional data like language breakdown, difficulty breakdown, etc.\n  lastUpdated DateTime @default(now())\n\n  profile ExternalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  @@unique([profileId, provider, statsType])\n  @@map(\"external_profile_stats\")\n}\n\nmodel AccountStats {\n  id          String   @id @default(cuid())\n  accountId   String // References Account.id\n  provider    String // \"github\", \"gitlab\", \"linkedin\"\n  statsType   String // \"repositories\", \"followers\", \"following\", \"stars\", \"commits\", \"connections\", etc.\n  value       Int\n  metadata    Json? // Additional data like language breakdown, repo types, etc.\n  lastUpdated DateTime @default(now())\n  userId      String // <-- Add this line\n\n  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- Add this line\n\n  @@unique([accountId, provider, statsType])\n  @@map(\"account_stats\")\n}\n\nmodel LinkedInProfile {\n  id                String   @id @default(cuid())\n  userId            String   @unique\n  linkedinId        String   @unique // LinkedIn member ID\n  firstName         String\n  lastName          String\n  headline          String?\n  summary           String?\n  industry          String?\n  location          String?\n  profilePictureUrl String?\n  bannerPictureUrl  String?\n  publicProfileUrl  String\n  vanityName        String?\n  isActive          Boolean  @default(true)\n  lastSynced        DateTime @default(now())\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  experiences LinkedInExperience[]\n  educations  LinkedInEducation[]\n  skills      LinkedInSkill[]\n  connections LinkedInConnection[]\n  posts       LinkedInPost[]\n  activities  LinkedInActivity[]\n\n  @@map(\"linkedin_profiles\")\n}\n\nmodel LinkedInExperience {\n  id             String    @id @default(cuid())\n  profileId      String\n  experienceId   String    @unique // LinkedIn experience ID\n  title          String\n  companyName    String\n  companyId      String?\n  location       String?\n  description    String?\n  startDate      DateTime?\n  endDate        DateTime?\n  isCurrent      Boolean   @default(false)\n  companyLogoUrl String?\n  companyUrl     String?\n  lastSynced     DateTime  @default(now())\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n\n  profile LinkedInProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  @@map(\"linkedin_experiences\")\n}\n\nmodel LinkedInEducation {\n  id            String    @id @default(cuid())\n  profileId     String\n  educationId   String    @unique // LinkedIn education ID\n  schoolName    String\n  schoolId      String?\n  degree        String?\n  fieldOfStudy  String?\n  startDate     DateTime?\n  endDate       DateTime?\n  grade         String?\n  activities    String?\n  description   String?\n  schoolLogoUrl String?\n  lastSynced    DateTime  @default(now())\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n\n  profile LinkedInProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  @@map(\"linkedin_educations\")\n}\n\nmodel LinkedInSkill {\n  id           String   @id @default(cuid())\n  profileId    String\n  skillId      String   @unique // LinkedIn skill ID\n  name         String\n  endorsements Int      @default(0)\n  lastSynced   DateTime @default(now())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  profile LinkedInProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  @@map(\"linkedin_skills\")\n}\n\nmodel LinkedInConnection {\n  id                String   @id @default(cuid())\n  profileId         String\n  connectionId      String   @unique // LinkedIn connection ID\n  firstName         String\n  lastName          String\n  headline          String?\n  profilePictureUrl String?\n  publicProfileUrl  String\n  industry          String?\n  location          String?\n  isActive          Boolean  @default(true)\n  lastSynced        DateTime @default(now())\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  profile LinkedInProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  @@map(\"linkedin_connections\")\n}\n\nmodel LinkedInPost {\n  id                 String   @id @default(cuid())\n  profileId          String\n  postId             String   @unique // LinkedIn post ID\n  text               String?\n  authorName         String\n  authorHeadline     String?\n  authorProfileUrl   String\n  authorPictureUrl   String?\n  postType           String // text, image, video, article, etc.\n  mediaUrls          String[] // URLs to images/videos\n  articleUrl         String? // For article posts\n  articleTitle       String? // For article posts\n  articleDescription String? // For article posts\n  articleImageUrl    String? // For article posts\n  likesCount         Int      @default(0)\n  commentsCount      Int      @default(0)\n  sharesCount        Int      @default(0)\n  publishedAt        DateTime\n  lastSynced         DateTime @default(now())\n  createdAt          DateTime @default(now())\n  updatedAt          DateTime @updatedAt\n\n  profile LinkedInProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  @@map(\"linkedin_posts\")\n}\n\nmodel LinkedInActivity {\n  id          String   @id @default(cuid())\n  profileId   String // <-- Change from userId to profileId\n  type        String // post, connection, profile_update, etc.\n  action      String? // created, updated, connected, etc.\n  title       String?\n  description String?\n  url         String?\n  metadata    Json? // Additional activity data\n  createdAt   DateTime @default(now())\n\n  profile LinkedInProfile @relation(fields: [profileId], references: [id], onDelete: Cascade) // <-- Change relation to LinkedInProfile\n\n  @@map(\"linkedin_activities\")\n}\n\nmodel LinkedInCompany {\n  id             String   @id @default(cuid())\n  companyId      String   @unique // LinkedIn company ID\n  name           String\n  description    String?\n  industry       String?\n  companySize    String?\n  website        String?\n  logoUrl        String?\n  bannerUrl      String?\n  location       String?\n  foundedYear    Int?\n  employeeCount  Int?\n  followersCount Int?\n  lastSynced     DateTime @default(now())\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  @@map(\"linkedin_companies\")\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Enhanced session tracking\n  device       String? // Device name/type\n  deviceId     String? // Unique device identifier\n  ipAddress    String?\n  userAgent    String?\n  location     String? // City, Country\n  isActive     Boolean  @default(true)\n  lastActivity DateTime @default(now())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  sessionActivities SessionActivity[]\n\n  @@map(\"sessions\")\n}\n\n// Add new model for session activity logs\nmodel SessionActivity {\n  id        String   @id @default(cuid())\n  sessionId String\n  userId    String // Add this field (populate from Session.userId)\n  action    String // LOGIN, LOGOUT, ACTIVITY, TERMINATED\n  ipAddress String?\n  userAgent String?\n  location  String?\n  metadata  Json? // Additional data like page visited, etc.\n  createdAt DateTime @default(now())\n\n  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Add this relation\n\n  @@map(\"session_activities\")\n}\n\n// Add new model for device management\nmodel UserDevice {\n  id             String   @id @default(cuid())\n  userId         String\n  deviceId       String   @unique\n  deviceName     String // \"Chrome on Windows\", \"Safari on iPhone\", etc.\n  deviceType     String // \"desktop\", \"mobile\", \"tablet\"\n  osName         String? // \"Windows\", \"macOS\", \"iOS\", \"Android\"\n  osVersion      String?\n  browserName    String? // \"Chrome\", \"Safari\", \"Firefox\"\n  browserVersion String?\n  isTrusted      Boolean  @default(false)\n  lastUsed       DateTime @default(now())\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, deviceId])\n  @@map(\"user_devices\")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n  @@map(\"verification_tokens\")\n}\n\n// ============================================================================\n// SKILLS & EXPERTISE MODELS\n// ============================================================================\n\nenum SkillCategory {\n  PROGRAMMING_LANGUAGE\n  FRAMEWORK\n  DATABASE\n  CLOUD_PLATFORM\n  DEVOPS_TOOL\n  DESIGN_TOOL\n  PROJECT_MANAGEMENT\n  SOFT_SKILL\n  OTHER\n}\n\nmodel Skill {\n  id               String        @id @default(cuid())\n  userId           String\n  name             String\n  category         SkillCategory\n  proficiencyLevel Int           @db.SmallInt // 1-10 scale\n  isVerified       Boolean       @default(false)\n  yearsExperience  Int?          @db.SmallInt\n  lastUsed         DateTime?\n\n  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  endorsements Endorsement[] @relation(\"SkillEndorsements\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([userId, name])\n  @@map(\"skills\")\n}\n\nmodel Endorsement {\n  id      String  @id @default(cuid())\n  skillId String\n  giverId String\n  message String?\n\n  skill      Skill  @relation(\"SkillEndorsements\", fields: [skillId], references: [id], onDelete: Cascade)\n  giver      User   @relation(\"EndorsementGiver\", fields: [giverId], references: [id], onDelete: Cascade)\n  receiver   User   @relation(\"EndorsementReceiver\", fields: [receiverId], references: [id], onDelete: Cascade) // <-- Add this line\n  receiverId String // <-- Add this line\n\n  createdAt DateTime @default(now())\n\n  @@unique([skillId, giverId])\n  @@map(\"endorsements\")\n}\n\nmodel Experience {\n  id               String    @id @default(cuid())\n  userId           String\n  title            String\n  company          String\n  location         String?\n  startDate        DateTime\n  endDate          DateTime?\n  isCurrent        Boolean   @default(false)\n  responsibilities String?\n  createdAt        DateTime  @default(now())\n  updatedAt        DateTime  @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"experiences\")\n}\n\nmodel Education {\n  id           String    @id @default(cuid())\n  userId       String\n  institution  String\n  degree       String?\n  fieldOfStudy String?\n  startDate    DateTime?\n  endDate      DateTime?\n  grade        String?\n  description  String?\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"educations\")\n}\n\n// ============================================================================\n// PROJECT MODELS\n// ============================================================================\n\nenum ProjectStatus {\n  PLANNING\n  ACTIVE\n  ON_HOLD\n  COMPLETED\n  ARCHIVED\n}\n\nenum ProjectVisibility {\n  PUBLIC\n  PRIVATE\n  CONNECTIONS_ONLY\n}\n\nenum CollaboratorRole {\n  OWNER\n  CO_OWNER\n  DEVELOPER\n  DESIGNER\n  TESTER\n  MENTOR\n  VIEWER\n}\n\nmodel Project {\n  id          String            @id @default(cuid())\n  title       String\n  description String?\n  shortDesc   String?           @db.VarChar(280)\n  ownerId     String\n  status      ProjectStatus     @default(PLANNING)\n  visibility  ProjectVisibility @default(PUBLIC)\n\n  // Project details\n  techStack        String[]\n  categories       String[]\n  tags             String[]\n  difficultyLevel  String? // BEGINNER, INTERMEDIATE, ADVANCED\n  estimatedHours   Int?\n  maxCollaborators Int?     @default(5)\n\n  // Links\n  githubUrl   String?\n  liveUrl     String?\n  designUrl   String?\n  documentUrl String?\n\n  // Media\n  thumbnailUrl String?\n  images       String[]\n\n  // Collaboration settings\n  isRecruiting      Boolean  @default(false)\n  recruitmentMsg    String?\n  requiredSkills    String[]\n  preferredTimezone String?\n\n  // Metrics\n  viewCount Int @default(0)\n  likeCount Int @default(0)\n  forkCount Int @default(0)\n\n  owner User @relation(\"ProjectOwner\", fields: [ownerId], references: [id], onDelete: Cascade, map: \"projects_ownerId_fkey\")\n\n  collaborators ProjectCollaborator[]\n  tasks         Task[]\n  chats         Chat[]\n  milestones    Milestone[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"projects\")\n}\n\nmodel ProjectCollaborator {\n  id        String           @id @default(cuid())\n  projectId String\n  userId    String\n  role      CollaboratorRole\n  joinedAt  DateTime         @default(now())\n  isActive  Boolean          @default(true)\n\n  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([projectId, userId])\n  @@map(\"project_collaborators\")\n}\n\n// ============================================================================\n// TASK MANAGEMENT MODELS\n// ============================================================================\n\nenum TaskStatus {\n  TODO\n  IN_PROGRESS\n  IN_REVIEW\n  DONE\n  CANCELLED\n}\n\nenum TaskPriority {\n  LOW\n  MEDIUM\n  HIGH\n  URGENT\n}\n\nmodel Task {\n  id          String       @id @default(cuid())\n  projectId   String\n  title       String\n  description String?\n  status      TaskStatus   @default(TODO)\n  priority    TaskPriority @default(MEDIUM)\n\n  assigneeId String?\n  creatorId  String\n\n  // Task details\n  estimatedHours Int?\n  actualHours    Int?\n  dueDate        DateTime?\n  completedAt    DateTime?\n\n  // Organization\n  tags     String[]\n  labels   String[]\n  position Int      @default(0) // For Kanban ordering\n\n  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  assignee User?     @relation(\"TaskAssignee\", fields: [assigneeId], references: [id])\n  creator  User      @relation(\"TaskCreator\", fields: [creatorId], references: [id])\n  comments Comment[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"tasks\")\n}\n\nmodel Milestone {\n  id          String    @id @default(cuid())\n  projectId   String\n  title       String\n  description String?\n  dueDate     DateTime?\n  completedAt DateTime?\n  isCompleted Boolean   @default(false)\n\n  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"milestones\")\n}\n\nmodel Comment {\n  id       String @id @default(cuid())\n  taskId   String\n  authorId String\n  content  String\n\n  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)\n  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"comments\")\n}\n\n// ============================================================================\n// CONNECTION & NETWORKING MODELS\n// ============================================================================\n\nenum ConnectionStatus {\n  PENDING\n  ACCEPTED\n  DECLINED\n  BLOCKED\n}\n\nenum ConnectionType {\n  COLLABORATOR\n  MENTOR\n  MENTEE\n  FRIEND\n  COLLEAGUE\n  PROFESSIONAL\n}\n\nmodel Connection {\n  id         String           @id @default(cuid())\n  senderId   String\n  receiverId String\n  status     ConnectionStatus @default(PENDING)\n  type       ConnectionType   @default(COLLABORATOR)\n  message    String?\n\n  sender   User @relation(\"ConnectionSender\", fields: [senderId], references: [id], onDelete: Cascade)\n  receiver User @relation(\"ConnectionReceiver\", fields: [receiverId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([senderId, receiverId])\n  @@map(\"connections\")\n}\n\nenum ConnectionPrivacyLevel {\n  EVERYONE\n  CONNECTIONS_ONLY\n  MUTUAL_CONNECTIONS\n  NOBODY\n}\n\nenum ConnectionRequestLevel {\n  EVERYONE\n  VERIFIED_ONLY\n  CONNECTIONS_ONLY\n  NOBODY\n}\n\nmodel ConnectionPrivacy {\n  id                     String                 @id @default(cuid())\n  userId                 String                 @unique\n  connectionPrivacyLevel ConnectionPrivacyLevel @default(EVERYONE)\n  connectionRequestLevel ConnectionRequestLevel @default(EVERYONE)\n  hideConnections        Boolean                @default(false)\n  autoDeclineRequests    Boolean                @default(false)\n  blockedUserIds         String[] // Array of blocked user IDs\n\n  // Add these lines:\n  profileVisibility String  @default(\"PUBLIC\") // PUBLIC, PRIVATE, CONNECTIONS_ONLY\n  allowMessages     Boolean @default(true)\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"connection_privacy\")\n}\n\n// ============================================================================\n// MESSAGING & COMMUNICATION MODELS\n// ============================================================================\n\nenum ChatType {\n  DIRECT\n  GROUP\n  PROJECT\n}\n\nmodel MessageReaction {\n  id        String   @id @default(cuid())\n  messageId String\n  userId    String\n  emoji     String // Unicode emoji or custom emoji\n  createdAt DateTime @default(now())\n\n  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([messageId, userId, emoji])\n  @@map(\"message_reactions\")\n}\n\nmodel MessageRead {\n  id        String   @id @default(cuid())\n  messageId String\n  userId    String\n  readAt    DateTime @default(now())\n\n  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([messageId, userId])\n  @@map(\"message_reads\")\n}\n\nmodel ChatSettings {\n  id                String  @id @default(cuid())\n  chatId            String  @unique\n  allowFileSharing  Boolean @default(true)\n  allowReactions    Boolean @default(true)\n  allowPolls        Boolean @default(true)\n  muteNotifications Boolean @default(false)\n  autoDeleteAfter   Int? // Days (null = never)\n  maxParticipants   Int? // For group chats\n  isPublic          Boolean @default(false)\n  inviteCode        String? @unique // For public group invites\n\n  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"chat_settings\")\n}\n\nmodel Chat {\n  id          String   @id @default(cuid())\n  type        ChatType\n  name        String?\n  description String?\n  projectId   String?\n  isActive    Boolean  @default(true)\n\n  // Add new fields\n  lastMessageId String?\n  lastMessageAt DateTime?\n  avatarUrl     String?\n\n  project      Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  participants ChatParticipant[]\n  messages     Message[]\n  settings     ChatSettings?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"chats\")\n}\n\nmodel ChatParticipant {\n  id       String    @id @default(cuid())\n  chatId   String\n  userId   String\n  joinedAt DateTime  @default(now())\n  leftAt   DateTime?\n  isActive Boolean   @default(true)\n  isAdmin  Boolean   @default(false)\n\n  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([chatId, userId])\n  @@map(\"chat_participants\")\n}\n\nenum MessageType {\n  TEXT\n  IMAGE\n  FILE\n  CODE\n  SYSTEM\n  AUDIO\n  VIDEO\n  LOCATION\n  CONTACT\n  POLL\n  REACTION\n}\n\nmodel Message {\n  id         String      @id @default(cuid())\n  chatId     String\n  senderId   String\n  receiverId String? // For direct messages\n  content    String\n  type       MessageType @default(TEXT)\n\n  // Message metadata\n  isEdited  Boolean   @default(false)\n  editedAt  DateTime?\n  isDeleted Boolean   @default(false)\n  deletedAt DateTime?\n\n  // File attachments\n  attachments Json? // Array of file objects\n\n  // Add new fields\n  replyToId String? // For message replies\n  replyTo   Message?  @relation(\"MessageReply\", fields: [replyToId], references: [id])\n  replies   Message[] @relation(\"MessageReply\")\n\n  // Relations\n  chat      Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  sender    User              @relation(\"MessageSender\", fields: [senderId], references: [id], onDelete: Cascade)\n  receiver  User?             @relation(\"MessageReceiver\", fields: [receiverId], references: [id])\n  reactions MessageReaction[]\n  reads     MessageRead[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"messages\")\n}\n\n// ============================================================================\n// COMMUNITY & GAMIFICATION MODELS\n// ============================================================================\n\nmodel Achievement {\n  id          String  @id @default(cuid())\n  name        String  @unique\n  description String\n  icon        String\n  category    String\n  points      Int     @default(0)\n  isActive    Boolean @default(true)\n\n  // Achievement criteria (stored as JSON)\n  criteria Json\n\n  userAchievements UserAchievement[]\n\n  createdAt DateTime @default(now())\n\n  @@map(\"achievements\")\n}\n\nmodel UserAchievement {\n  id            String   @id @default(cuid())\n  userId        String\n  achievementId String\n  unlockedAt    DateTime @default(now())\n\n  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, achievementId])\n  @@map(\"user_achievements\")\n}\n\n// ============================================================================\n// FORUM & DISCUSSION MODELS\n// ============================================================================\n\nmodel ForumCategory {\n  id          String  @id @default(cuid())\n  name        String  @unique\n  description String?\n  slug        String  @unique\n  color       String?\n  icon        String?\n  isActive    Boolean @default(true)\n\n  posts ForumPost[]\n\n  createdAt DateTime @default(now())\n\n  @@map(\"forum_categories\")\n}\n\nmodel ForumPost {\n  id         String @id @default(cuid())\n  categoryId String\n  authorId   String\n  title      String\n  content    String\n  slug       String @unique\n\n  // Post metrics\n  viewCount  Int @default(0)\n  likeCount  Int @default(0)\n  replyCount Int @default(0)\n\n  // Post settings\n  isPinned Boolean @default(false)\n  isLocked Boolean @default(false)\n\n  tags String[]\n\n  category ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)\n  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  replies  ForumReply[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"forum_posts\")\n}\n\nmodel ForumReply {\n  id       String  @id @default(cuid())\n  postId   String\n  authorId String\n  content  String\n  parentId String? // For nested replies\n\n  // Reply metrics\n  likeCount Int @default(0)\n\n  post     ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)\n  author   User         @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  parent   ForumReply?  @relation(\"ReplyParent\", fields: [parentId], references: [id])\n  children ForumReply[] @relation(\"ReplyParent\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"forum_replies\")\n}\n\n// ============================================================================\n// EVENT MANAGEMENT MODELS\n// ============================================================================\n\nenum EventType {\n  HACKATHON\n  MEETUP\n  WORKSHOP\n  WEBINAR\n  CONFERENCE\n  NETWORKING\n}\n\nenum EventStatus {\n  DRAFT\n  PUBLISHED\n  ONGOING\n  COMPLETED\n  CANCELLED\n}\n\nmodel Event {\n  id          String      @id @default(cuid())\n  title       String\n  description String\n  type        EventType\n  status      EventStatus @default(DRAFT)\n\n  organizerId String\n\n  // Event details\n  startDate    DateTime\n  endDate      DateTime\n  timezone     String\n  location     String? // Physical location\n  virtualLink  String? // Online event link\n  isVirtual    Boolean  @default(false)\n  maxAttendees Int?\n\n  // Event content\n  agenda       Json? // Event schedule\n  requirements String[] // Skills/tools needed\n  tags         String[]\n\n  // Media\n  bannerUrl    String?\n  thumbnailUrl String?\n\n  organizer    User               @relation(fields: [organizerId], references: [id], onDelete: Cascade)\n  participants EventParticipant[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"events\")\n}\n\nenum ParticipantStatus {\n  REGISTERED\n  CONFIRMED\n  ATTENDED\n  NO_SHOW\n  CANCELLED\n}\n\nmodel EventParticipant {\n  id      String            @id @default(cuid())\n  eventId String\n  userId  String\n  status  ParticipantStatus @default(REGISTERED)\n\n  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  registeredAt DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  @@unique([eventId, userId])\n  @@map(\"event_participants\")\n}\n\n// ============================================================================\n// NOTIFICATION SYSTEM\n// ============================================================================\n\nenum NotificationType {\n  // Connection notifications\n  CONNECTION_REQUEST\n  CONNECTION_ACCEPTED\n  CONNECTION_DECLINED\n  CONNECTION_BLOCKED\n\n  // Project notifications\n  PROJECT_INVITATION\n  PROJECT_JOINED\n  PROJECT_LEFT\n  PROJECT_UPDATED\n\n  // Task notifications\n  TASK_ASSIGNED\n  TASK_COMPLETED\n  TASK_COMMENTED\n  TASK_DUE_SOON\n  COMMENT_ADDED // Add this back\n\n  // Message notifications\n  MESSAGE_RECEIVED\n  MESSAGE_MENTIONED\n\n  // System notifications\n  ACHIEVEMENT_UNLOCKED\n  EVENT_REMINDER\n  SYSTEM_ANNOUNCEMENT\n  PROFILE_VIEWED\n}\n\nmodel Notification {\n  id      String           @id @default(cuid())\n  userId  String\n  type    NotificationType\n  title   String\n  message String\n  data    Json? // Additional notification data\n\n  // Enhanced fields\n  priority NotificationPriority @default(NORMAL)\n  category NotificationCategory\n  isRead   Boolean              @default(false)\n  readAt   DateTime?\n\n  // Action-related fields\n  actionUrl  String? // URL to navigate when clicked\n  actionText String? // Text for action button\n\n  // Sender information\n  senderId String? // Who triggered the notification\n  sender   User?   @relation(\"NotificationSender\", fields: [senderId], references: [id])\n\n  // Expiration and scheduling\n  expiresAt   DateTime?\n  scheduledAt DateTime? // For delayed notifications\n\n  // Delivery tracking\n  deliveredAt    DateTime?\n  deliveryMethod NotificationDeliveryMethod @default(IN_APP)\n\n  user User @relation(\"NotificationReceiver\", fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"notifications\")\n}\n\n// New enums\nenum NotificationPriority {\n  LOW\n  NORMAL\n  HIGH\n  URGENT\n}\n\nenum NotificationCategory {\n  CONNECTION\n  PROJECT\n  TASK\n  MESSAGE\n  ACHIEVEMENT\n  SYSTEM\n  EVENT\n}\n\nenum NotificationDeliveryMethod {\n  IN_APP\n  EMAIL\n  PUSH\n  SMS\n}\n\n// User notification preferences\nmodel NotificationPreference {\n  id           String               @id @default(cuid())\n  userId       String               @unique\n  category     NotificationCategory\n  inAppEnabled Boolean              @default(true)\n  emailEnabled Boolean              @default(false)\n  pushEnabled  Boolean              @default(false)\n  smsEnabled   Boolean              @default(false)\n\n  // Frequency settings\n  digestFrequency DigestFrequency @default(DAILY)\n  quietHoursStart String? // \"22:00\"\n  quietHoursEnd   String? // \"08:00\"\n  timezone        String          @default(\"UTC\")\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([userId, category])\n  @@map(\"notification_preferences\")\n}\n\nenum DigestFrequency {\n  IMMEDIATE\n  HOURLY\n  DAILY\n  WEEKLY\n  NEVER\n}\n\n// Notification templates for dynamic content\nmodel NotificationTemplate {\n  id         String               @id @default(cuid())\n  type       NotificationType     @unique\n  title      String\n  message    String\n  actionUrl  String?\n  actionText String?\n  priority   NotificationPriority @default(NORMAL)\n  category   NotificationCategory\n  isActive   Boolean              @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"notification_templates\")\n}\n\n// ============================================================================\n// REPORTING & MODERATION MODELS\n// ============================================================================\n\nenum ReportType {\n  SPAM\n  HARASSMENT\n  INAPPROPRIATE_CONTENT\n  FAKE_PROFILE\n  COPYRIGHT_VIOLATION\n  OTHER\n}\n\nenum ReportStatus {\n  PENDING\n  UNDER_REVIEW\n  RESOLVED\n  DISMISSED\n}\n\nmodel Report {\n  id         String       @id @default(cuid())\n  reporterId String\n  reportedId String\n  type       ReportType\n  reason     String\n  details    String?\n  status     ReportStatus @default(PENDING)\n\n  // Admin response\n  adminNotes String?\n  resolvedAt DateTime?\n\n  reporter User @relation(\"ReportCreator\", fields: [reporterId], references: [id], onDelete: Cascade)\n  reported User @relation(\"ReportedUser\", fields: [reportedId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"reports\")\n}\n\n// ============================================================================\n// API & INTEGRATION MODELS\n// ============================================================================\n\nmodel ApiKey {\n  id          String    @id @default(cuid())\n  userId      String\n  name        String\n  key         String    @unique\n  isActive    Boolean   @default(true)\n  lastUsedAt  DateTime?\n  expiresAt   DateTime?\n  permissions Json // Array of allowed operations\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"api_keys\")\n}\n\n// ============================================================================\n// ANALYTICS & TRACKING MODELS\n// ============================================================================\n\nmodel UserActivity {\n  id        String  @id @default(cuid())\n  userId    String\n  action    String // LOGIN, PROFILE_UPDATE, PROJECT_CREATE, etc.\n  resource  String? // Resource ID if applicable\n  metadata  Json? // Additional tracking data\n  ipAddress String?\n  userAgent String?\n\n  createdAt DateTime @default(now())\n\n  @@map(\"user_activities\")\n}\n\nmodel PlatformStats {\n  id               String   @id @default(cuid())\n  date             DateTime @unique @db.Date\n  totalUsers       Int      @default(0)\n  activeUsers      Int      @default(0)\n  newUsers         Int      @default(0)\n  totalProjects    Int      @default(0)\n  activeProjects   Int      @default(0)\n  newProjects      Int      @default(0)\n  totalConnections Int      @default(0)\n  newConnections   Int      @default(0)\n  totalMessages    Int      @default(0)\n  newMessages      Int      @default(0)\n\n  createdAt DateTime @default(now())\n\n  @@map(\"platform_stats\")\n}\n\nmodel Company {\n  id        String             @id @default(cuid())\n  name      String             @unique\n  questions LeetCodeQuestion[]\n}\n\nenum TimeCategory {\n  ALL\n  THIRTY_DAYS\n  THREE_MONTHS\n  SIX_MONTHS\n  MORE_THAN_SIX_MONTHS\n}\n\nmodel LeetCodeQuestion {\n  id             String                 @id @default(cuid())\n  leetcodeId     Int\n  url            String\n  title          String\n  difficulty     String\n  acceptance     Float\n  frequency      Float\n  companyId      String\n  company        Company                @relation(fields: [companyId], references: [id])\n  timeCategories TimeCategory[] // <-- Add this line\n  userProgress   UserQuestionProgress[]\n}\n\nenum QuestionStatus {\n  UNSOLVED\n  ATTEMPTED\n  SOLVED\n  BOOKMARKED\n}\n\nmodel UserQuestionProgress {\n  id         String         @id @default(cuid())\n  userId     String\n  questionId String\n  status     QuestionStatus @default(UNSOLVED)\n  updatedAt  DateTime       @updatedAt\n\n  user     User             @relation(fields: [userId], references: [id])\n  question LeetCodeQuestion @relation(fields: [questionId], references: [id])\n\n  @@unique([userId, questionId])\n}\n\nmodel GitHubAppInstallation {\n  id              String   @id @default(cuid())\n  accountId       String // Foreign key to Account model\n  installationId  Int      @unique // GitHub installation ID\n  githubAccountId String // GitHub account ID (renamed from accountId)\n  accountLogin    String // GitHub username\n  accountType     String // User or Organization\n  permissions     Json // Installation permissions\n  events          String[] // Webhook events\n  accessTokensUrl String\n  repositoriesUrl String\n  htmlUrl         String\n  isActive        Boolean  @default(true)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  account      Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)\n  repositories GitHubRepository[]\n  webhooks     GitHubWebhook[]\n\n  @@map(\"github_app_installations\")\n}\n\nmodel GitHubRepository {\n  id              String    @id @default(cuid())\n  installationId  String\n  repoId          Int       @unique // GitHub repository ID\n  name            String\n  fullName        String\n  description     String?\n  private         Boolean\n  htmlUrl         String\n  cloneUrl        String\n  sshUrl          String\n  defaultBranch   String\n  language        String?\n  languages       Json? // Language breakdown\n  topics          String[]\n  stargazersCount Int       @default(0)\n  watchersCount   Int       @default(0)\n  forksCount      Int       @default(0)\n  openIssuesCount Int       @default(0)\n  size            Int       @default(0)\n  createdAt       DateTime\n  updatedAt       DateTime\n  pushedAt        DateTime?\n  lastSynced      DateTime  @default(now())\n\n  installation GitHubAppInstallation @relation(fields: [installationId], references: [id], onDelete: Cascade)\n  commits      GitHubCommit[]\n  issues       GitHubIssue[]\n  pullRequests GitHubPullRequest[]\n  webhooks     GitHubWebhook[]\n\n  @@map(\"github_repositories\")\n}\n\nmodel GitHubCommit {\n  id             String   @id @default(cuid())\n  repositoryId   String\n  sha            String   @unique\n  message        String\n  authorName     String\n  authorEmail    String\n  authorDate     DateTime\n  committerName  String\n  committerEmail String\n  committerDate  DateTime\n  htmlUrl        String\n  stats          Json? // Additions, deletions, total\n  files          Json? // Changed files\n  createdAt      DateTime @default(now())\n\n  repository GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n\n  @@map(\"github_commits\")\n}\n\nmodel GitHubIssue {\n  id           String    @id @default(cuid())\n  repositoryId String\n  issueNumber  Int\n  title        String\n  body         String?\n  state        String // open, closed\n  author       String // GitHub username\n  assignees    String[] // GitHub usernames\n  labels       String[]\n  milestone    String?\n  htmlUrl      String\n  createdAt    DateTime\n  updatedAt    DateTime\n  closedAt     DateTime?\n  lastSynced   DateTime  @default(now())\n\n  repository GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n\n  @@unique([repositoryId, issueNumber])\n  @@map(\"github_issues\")\n}\n\nmodel GitHubPullRequest {\n  id           String    @id @default(cuid())\n  repositoryId String\n  prNumber     Int\n  title        String\n  body         String?\n  state        String // open, closed, merged\n  author       String // GitHub username\n  assignees    String[] // GitHub usernames\n  reviewers    String[] // GitHub usernames\n  labels       String[]\n  milestone    String?\n  baseBranch   String\n  headBranch   String\n  htmlUrl      String\n  createdAt    DateTime\n  updatedAt    DateTime\n  closedAt     DateTime?\n  mergedAt     DateTime?\n  lastSynced   DateTime  @default(now())\n\n  repository GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n\n  @@unique([repositoryId, prNumber])\n  @@map(\"github_pull_requests\")\n}\n\nmodel GitHubWebhook {\n  id             String    @id @default(cuid())\n  installationId String?\n  repositoryId   String?\n  webhookId      Int       @unique // GitHub webhook ID\n  name           String\n  events         String[] // Webhook events\n  config         Json // Webhook configuration\n  isActive       Boolean   @default(true)\n  lastDelivery   DateTime?\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n\n  installation GitHubAppInstallation? @relation(fields: [installationId], references: [id], onDelete: Cascade)\n  repository   GitHubRepository?      @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n\n  @@map(\"github_webhooks\")\n}\n\nmodel GitHubWebhookDelivery {\n  id         String   @id @default(cuid())\n  eventType  String\n  deliveryId String\n  payload    Json\n  createdAt  DateTime @default(now())\n  processed  Boolean  @default(false)\n\n  @@index([eventType])\n  @@index([createdAt])\n}\n\nmodel GitHubActivity {\n  id          String   @id @default(cuid())\n  userId      String\n  type        String // push, pull_request, issue, commit, etc.\n  action      String? // opened, closed, merged, etc.\n  repository  String // repo full name\n  title       String?\n  description String?\n  url         String?\n  metadata    Json? // Additional activity data\n  createdAt   DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"github_activities\")\n}\n",
  "inlineSchemaHash": "0a99ef3540e0a30db0a92a3cd8ed8e76855773a27e087d74d9832b2b38c2b9ee",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Plan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"PlanType\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"interval\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"features\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"stripePriceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxProjects\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxConnections\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxTeamMembers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hasAdvancedAI\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hasAnalytics\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hasPrioritySupport\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hasApiAccess\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"dailyRefreshLimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subscriptions\",\"kind\":\"object\",\"type\":\"Subscription\",\"relationName\":\"PlanToSubscription\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"plans\"},\"Subscription\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SubscriptionStatus\"},{\"name\":\"stripeCustomerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeSubscriptionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentPeriodStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"currentPeriodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelAtPeriodEnd\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"canceledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trialStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trialEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"nextBillingDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gracePeriodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastPaymentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"failedPaymentCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"autoRenew\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubscriptionToUser\"},{\"name\":\"plan\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"PlanToSubscription\"},{\"name\":\"invoices\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"InvoiceToSubscription\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"subscriptions\"},\"Invoice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subscriptionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeInvoiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"subscription\",\"kind\":\"object\",\"type\":\"Subscription\",\"relationName\":\"InvoiceToSubscription\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"invoices\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePictureUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"githubUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"linkedinUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"externalProfiles\",\"kind\":\"object\",\"type\":\"ExternalProfile\",\"relationName\":\"ExternalProfileToUser\"},{\"name\":\"accountStats\",\"kind\":\"object\",\"type\":\"AccountStats\",\"relationName\":\"AccountStatsToUser\"},{\"name\":\"githubActivities\",\"kind\":\"object\",\"type\":\"GitHubActivity\",\"relationName\":\"GitHubActivityToUser\"},{\"name\":\"linkedinProfile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInProfileToUser\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"accountType\",\"kind\":\"enum\",\"type\":\"AccountType\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isBanned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"bannedUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"banReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileVisibility\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"showEmail\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"showLocation\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowMessages\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"reputationScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalContributions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionProgress\",\"kind\":\"object\",\"type\":\"UserQuestionProgress\",\"relationName\":\"UserToUserQuestionProgress\"},{\"name\":\"profileCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"subscription\",\"kind\":\"object\",\"type\":\"Subscription\",\"relationName\":\"SubscriptionToUser\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"SkillToUser\"},{\"name\":\"experiences\",\"kind\":\"object\",\"type\":\"Experience\",\"relationName\":\"ExperienceToUser\"},{\"name\":\"educations\",\"kind\":\"object\",\"type\":\"Education\",\"relationName\":\"EducationToUser\"},{\"name\":\"ownedProjects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectOwner\"},{\"name\":\"projectCollaborations\",\"kind\":\"object\",\"type\":\"ProjectCollaborator\",\"relationName\":\"ProjectCollaboratorToUser\"},{\"name\":\"sentConnections\",\"kind\":\"object\",\"type\":\"Connection\",\"relationName\":\"ConnectionSender\"},{\"name\":\"receivedConnections\",\"kind\":\"object\",\"type\":\"Connection\",\"relationName\":\"ConnectionReceiver\"},{\"name\":\"sentMessages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageSender\"},{\"name\":\"receivedMessages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageReceiver\"},{\"name\":\"chatParticipants\",\"kind\":\"object\",\"type\":\"ChatParticipant\",\"relationName\":\"ChatParticipantToUser\"},{\"name\":\"taskAssignments\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskAssignee\"},{\"name\":\"createdTasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskCreator\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"achievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"endorsements\",\"kind\":\"object\",\"type\":\"Endorsement\",\"relationName\":\"EndorsementGiver\"},{\"name\":\"receivedEndorsements\",\"kind\":\"object\",\"type\":\"Endorsement\",\"relationName\":\"EndorsementReceiver\"},{\"name\":\"forumPosts\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumPostToUser\"},{\"name\":\"forumReplies\",\"kind\":\"object\",\"type\":\"ForumReply\",\"relationName\":\"ForumReplyToUser\"},{\"name\":\"eventParticipations\",\"kind\":\"object\",\"type\":\"EventParticipant\",\"relationName\":\"EventParticipantToUser\"},{\"name\":\"createdEvents\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToUser\"},{\"name\":\"reports\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"ReportCreator\"},{\"name\":\"reportedBy\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"ReportedUser\"},{\"name\":\"apiKeys\",\"kind\":\"object\",\"type\":\"ApiKey\",\"relationName\":\"ApiKeyToUser\"},{\"name\":\"suggestionCache\",\"kind\":\"object\",\"type\":\"UserSuggestionCache\",\"relationName\":\"UserToUserSuggestionCache\"},{\"name\":\"similarCache\",\"kind\":\"object\",\"type\":\"UserSimilarCache\",\"relationName\":\"UserToUserSimilarCache\"},{\"name\":\"profileProgress\",\"kind\":\"object\",\"type\":\"ProfileProgress\",\"relationName\":\"ProfileProgressToUser\"},{\"name\":\"connectionPrivacy\",\"kind\":\"object\",\"type\":\"ConnectionPrivacy\",\"relationName\":\"ConnectionPrivacyToUser\"},{\"name\":\"sentNotifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationSender\"},{\"name\":\"receivedNotifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationReceiver\"},{\"name\":\"notificationPreferences\",\"kind\":\"object\",\"type\":\"NotificationPreference\",\"relationName\":\"NotificationPreferenceToUser\"},{\"name\":\"messageReactions\",\"kind\":\"object\",\"type\":\"MessageReaction\",\"relationName\":\"MessageReactionToUser\"},{\"name\":\"messageReads\",\"kind\":\"object\",\"type\":\"MessageRead\",\"relationName\":\"MessageReadToUser\"},{\"name\":\"isOnline\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastSeen\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessionActivities\",\"kind\":\"object\",\"type\":\"SessionActivity\",\"relationName\":\"SessionActivityToUser\"},{\"name\":\"devices\",\"kind\":\"object\",\"type\":\"UserDevice\",\"relationName\":\"UserToUserDevice\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"users\"},\"UserSuggestionCache\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectIdeas\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"skillSuggestions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastGenerated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isValid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSuggestionCache\"}],\"dbName\":\"user_suggestion_cache\"},\"UserSimilarCache\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSimilarCache\"}],\"dbName\":\"user_similar_cache\"},\"ProfileProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentSection\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfileProgressToUser\"}],\"dbName\":\"profile_progress\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stats\",\"kind\":\"object\",\"type\":\"AccountStats\",\"relationName\":\"AccountToAccountStats\"},{\"name\":\"githubInstallations\",\"kind\":\"object\",\"type\":\"GitHubAppInstallation\",\"relationName\":\"AccountToGitHubAppInstallation\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":\"accounts\"},\"ExternalProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ExternalProfileToUser\"},{\"name\":\"stats\",\"kind\":\"object\",\"type\":\"ExternalProfileStats\",\"relationName\":\"ExternalProfileToExternalProfileStats\"}],\"dbName\":\"external_profiles\"},\"ExternalProfileStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statsType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"ExternalProfile\",\"relationName\":\"ExternalProfileToExternalProfileStats\"}],\"dbName\":\"external_profile_stats\"},\"AccountStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statsType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToAccountStats\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountStatsToUser\"}],\"dbName\":\"account_stats\"},\"LinkedInProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"linkedinId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"headline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePictureUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bannerPictureUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicProfileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"vanityName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LinkedInProfileToUser\"},{\"name\":\"experiences\",\"kind\":\"object\",\"type\":\"LinkedInExperience\",\"relationName\":\"LinkedInExperienceToLinkedInProfile\"},{\"name\":\"educations\",\"kind\":\"object\",\"type\":\"LinkedInEducation\",\"relationName\":\"LinkedInEducationToLinkedInProfile\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"LinkedInSkill\",\"relationName\":\"LinkedInProfileToLinkedInSkill\"},{\"name\":\"connections\",\"kind\":\"object\",\"type\":\"LinkedInConnection\",\"relationName\":\"LinkedInConnectionToLinkedInProfile\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"LinkedInPost\",\"relationName\":\"LinkedInPostToLinkedInProfile\"},{\"name\":\"activities\",\"kind\":\"object\",\"type\":\"LinkedInActivity\",\"relationName\":\"LinkedInActivityToLinkedInProfile\"}],\"dbName\":\"linkedin_profiles\"},\"LinkedInExperience\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experienceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isCurrent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"companyLogoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInExperienceToLinkedInProfile\"}],\"dbName\":\"linkedin_experiences\"},\"LinkedInEducation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"educationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schoolName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schoolId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"degree\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fieldOfStudy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activities\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schoolLogoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInEducationToLinkedInProfile\"}],\"dbName\":\"linkedin_educations\"},\"LinkedInSkill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skillId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endorsements\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInProfileToLinkedInSkill\"}],\"dbName\":\"linkedin_skills\"},\"LinkedInConnection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"connectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"headline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePictureUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicProfileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInConnectionToLinkedInProfile\"}],\"dbName\":\"linkedin_connections\"},\"LinkedInPost\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorHeadline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorProfileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorPictureUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mediaUrls\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"articleUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"articleTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"articleDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"articleImageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"likesCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"commentsCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sharesCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInPostToLinkedInProfile\"}],\"dbName\":\"linkedin_posts\"},\"LinkedInActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"LinkedInProfile\",\"relationName\":\"LinkedInActivityToLinkedInProfile\"}],\"dbName\":\"linkedin_activities\"},\"LinkedInCompany\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companySize\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bannerUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foundedYear\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"employeeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"followersCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"linkedin_companies\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"device\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastActivity\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessionActivities\",\"kind\":\"object\",\"type\":\"SessionActivity\",\"relationName\":\"SessionToSessionActivity\"}],\"dbName\":\"sessions\"},\"SessionActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToSessionActivity\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionActivityToUser\"}],\"dbName\":\"session_activities\"},\"UserDevice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"osName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"osVersion\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"browserName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"browserVersion\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isTrusted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastUsed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserDevice\"}],\"dbName\":\"user_devices\"},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification_tokens\"},\"Skill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"SkillCategory\"},{\"name\":\"proficiencyLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"yearsExperience\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastUsed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SkillToUser\"},{\"name\":\"endorsements\",\"kind\":\"object\",\"type\":\"Endorsement\",\"relationName\":\"SkillEndorsements\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"skills\"},\"Endorsement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skillId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"giverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skill\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"SkillEndorsements\"},{\"name\":\"giver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EndorsementGiver\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EndorsementReceiver\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"endorsements\"},\"Experience\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"company\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isCurrent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"responsibilities\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ExperienceToUser\"}],\"dbName\":\"experiences\"},\"Education\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"institution\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"degree\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fieldOfStudy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EducationToUser\"}],\"dbName\":\"educations\"},\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shortDesc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ProjectStatus\"},{\"name\":\"visibility\",\"kind\":\"enum\",\"type\":\"ProjectVisibility\"},{\"name\":\"techStack\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"categories\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficultyLevel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"estimatedHours\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxCollaborators\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"githubUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"liveUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"designUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRecruiting\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"recruitmentMsg\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requiredSkills\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredTimezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"viewCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"likeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"forkCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProjectOwner\"},{\"name\":\"collaborators\",\"kind\":\"object\",\"type\":\"ProjectCollaborator\",\"relationName\":\"ProjectToProjectCollaborator\"},{\"name\":\"tasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"ProjectToTask\"},{\"name\":\"chats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToProject\"},{\"name\":\"milestones\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"MilestoneToProject\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"projects\"},\"ProjectCollaborator\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"CollaboratorRole\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToProjectCollaborator\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProjectCollaboratorToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"project_collaborators\"},\"Task\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TaskStatus\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"TaskPriority\"},{\"name\":\"assigneeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creatorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"estimatedHours\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"actualHours\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"labels\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToTask\"},{\"name\":\"assignee\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TaskAssignee\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TaskCreator\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToTask\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"tasks\"},\"Milestone\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"MilestoneToProject\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"milestones\"},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"CommentToTask\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"comments\"},\"Connection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ConnectionStatus\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ConnectionType\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConnectionSender\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConnectionReceiver\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"connections\"},\"ConnectionPrivacy\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"connectionPrivacyLevel\",\"kind\":\"enum\",\"type\":\"ConnectionPrivacyLevel\"},{\"name\":\"connectionRequestLevel\",\"kind\":\"enum\",\"type\":\"ConnectionRequestLevel\"},{\"name\":\"hideConnections\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"autoDeclineRequests\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"blockedUserIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileVisibility\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allowMessages\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConnectionPrivacyToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"connection_privacy\"},\"MessageReaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emoji\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToMessageReaction\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageReactionToUser\"}],\"dbName\":\"message_reactions\"},\"MessageRead\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToMessageRead\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageReadToUser\"}],\"dbName\":\"message_reads\"},\"ChatSettings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allowFileSharing\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowReactions\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowPolls\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"muteNotifications\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"autoDeleteAfter\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxParticipants\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"inviteCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToChatSettings\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"chat_settings\"},\"Chat\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ChatType\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastMessageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastMessageAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ChatToProject\"},{\"name\":\"participants\",\"kind\":\"object\",\"type\":\"ChatParticipant\",\"relationName\":\"ChatToChatParticipant\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ChatToMessage\"},{\"name\":\"settings\",\"kind\":\"object\",\"type\":\"ChatSettings\",\"relationName\":\"ChatToChatSettings\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"chats\"},\"ChatParticipant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"leftAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isAdmin\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToChatParticipant\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatParticipantToUser\"}],\"dbName\":\"chat_participants\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"MessageType\"},{\"name\":\"isEdited\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"editedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"replyToId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"replyTo\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageReply\"},{\"name\":\"replies\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageReply\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToMessage\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageSender\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageReceiver\"},{\"name\":\"reactions\",\"kind\":\"object\",\"type\":\"MessageReaction\",\"relationName\":\"MessageToMessageReaction\"},{\"name\":\"reads\",\"kind\":\"object\",\"type\":\"MessageRead\",\"relationName\":\"MessageToMessageRead\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"messages\"},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"criteria\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"userAchievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"AchievementToUserAchievement\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"achievements\"},\"UserAchievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unlockedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"achievement\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToUserAchievement\"}],\"dbName\":\"user_achievements\"},\"ForumCategory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumCategoryToForumPost\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"forum_categories\"},\"ForumPost\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"viewCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"likeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"replyCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isPinned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isLocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"ForumCategory\",\"relationName\":\"ForumCategoryToForumPost\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ForumPostToUser\"},{\"name\":\"replies\",\"kind\":\"object\",\"type\":\"ForumReply\",\"relationName\":\"ForumPostToForumReply\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"forum_posts\"},\"ForumReply\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"likeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumPostToForumReply\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ForumReplyToUser\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"ForumReply\",\"relationName\":\"ReplyParent\"},{\"name\":\"children\",\"kind\":\"object\",\"type\":\"ForumReply\",\"relationName\":\"ReplyParent\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"forum_replies\"},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"EventType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EventStatus\"},{\"name\":\"organizerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"virtualLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isVirtual\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"maxAttendees\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"agenda\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bannerUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventToUser\"},{\"name\":\"participants\",\"kind\":\"object\",\"type\":\"EventParticipant\",\"relationName\":\"EventToEventParticipant\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"events\"},\"EventParticipant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ParticipantStatus\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToEventParticipant\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventParticipantToUser\"},{\"name\":\"registeredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"event_participants\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"NotificationPriority\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"NotificationCategory\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"actionUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationSender\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deliveredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deliveryMethod\",\"kind\":\"enum\",\"type\":\"NotificationDeliveryMethod\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationReceiver\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notifications\"},\"NotificationPreference\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"NotificationCategory\"},{\"name\":\"inAppEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"pushEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"smsEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"digestFrequency\",\"kind\":\"enum\",\"type\":\"DigestFrequency\"},{\"name\":\"quietHoursStart\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quietHoursEnd\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationPreferenceToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notification_preferences\"},\"NotificationTemplate\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"NotificationPriority\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"NotificationCategory\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notification_templates\"},\"Report\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reporterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reportedId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ReportType\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ReportStatus\"},{\"name\":\"adminNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resolvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"reporter\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReportCreator\"},{\"name\":\"reported\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReportedUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"reports\"},\"ApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"permissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ApiKeyToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"api_keys\"},\"UserActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resource\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"user_activities\"},\"PlatformStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalUsers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"activeUsers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"newUsers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalProjects\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"activeProjects\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"newProjects\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalConnections\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"newConnections\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalMessages\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"newMessages\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"platform_stats\"},\"Company\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"LeetCodeQuestion\",\"relationName\":\"CompanyToLeetCodeQuestion\"}],\"dbName\":null},\"LeetCodeQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"leetcodeId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"acceptance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"frequency\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToLeetCodeQuestion\"},{\"name\":\"timeCategories\",\"kind\":\"enum\",\"type\":\"TimeCategory\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"UserQuestionProgress\",\"relationName\":\"LeetCodeQuestionToUserQuestionProgress\"}],\"dbName\":null},\"UserQuestionProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"QuestionStatus\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserQuestionProgress\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"LeetCodeQuestion\",\"relationName\":\"LeetCodeQuestionToUserQuestionProgress\"}],\"dbName\":null},\"GitHubAppInstallation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"installationId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"githubAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountLogin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"permissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"events\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokensUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repositoriesUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"htmlUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToGitHubAppInstallation\"},{\"name\":\"repositories\",\"kind\":\"object\",\"type\":\"GitHubRepository\",\"relationName\":\"GitHubAppInstallationToGitHubRepository\"},{\"name\":\"webhooks\",\"kind\":\"object\",\"type\":\"GitHubWebhook\",\"relationName\":\"GitHubAppInstallationToGitHubWebhook\"}],\"dbName\":\"github_app_installations\"},\"GitHubRepository\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"installationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repoId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"private\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"htmlUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cloneUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sshUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"defaultBranch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"languages\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"topics\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stargazersCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"watchersCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"forksCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"openIssuesCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"pushedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"installation\",\"kind\":\"object\",\"type\":\"GitHubAppInstallation\",\"relationName\":\"GitHubAppInstallationToGitHubRepository\"},{\"name\":\"commits\",\"kind\":\"object\",\"type\":\"GitHubCommit\",\"relationName\":\"GitHubCommitToGitHubRepository\"},{\"name\":\"issues\",\"kind\":\"object\",\"type\":\"GitHubIssue\",\"relationName\":\"GitHubIssueToGitHubRepository\"},{\"name\":\"pullRequests\",\"kind\":\"object\",\"type\":\"GitHubPullRequest\",\"relationName\":\"GitHubPullRequestToGitHubRepository\"},{\"name\":\"webhooks\",\"kind\":\"object\",\"type\":\"GitHubWebhook\",\"relationName\":\"GitHubRepositoryToGitHubWebhook\"}],\"dbName\":\"github_repositories\"},\"GitHubCommit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repositoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sha\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"committerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"committerEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"committerDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"htmlUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stats\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"files\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"repository\",\"kind\":\"object\",\"type\":\"GitHubRepository\",\"relationName\":\"GitHubCommitToGitHubRepository\"}],\"dbName\":\"github_commits\"},\"GitHubIssue\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repositoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"issueNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignees\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"labels\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"htmlUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"closedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"repository\",\"kind\":\"object\",\"type\":\"GitHubRepository\",\"relationName\":\"GitHubIssueToGitHubRepository\"}],\"dbName\":\"github_issues\"},\"GitHubPullRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repositoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"prNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignees\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reviewers\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"labels\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"baseBranch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"headBranch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"htmlUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"closedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"mergedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSynced\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"repository\",\"kind\":\"object\",\"type\":\"GitHubRepository\",\"relationName\":\"GitHubPullRequestToGitHubRepository\"}],\"dbName\":\"github_pull_requests\"},\"GitHubWebhook\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"installationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repositoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"webhookId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"events\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastDelivery\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"installation\",\"kind\":\"object\",\"type\":\"GitHubAppInstallation\",\"relationName\":\"GitHubAppInstallationToGitHubWebhook\"},{\"name\":\"repository\",\"kind\":\"object\",\"type\":\"GitHubRepository\",\"relationName\":\"GitHubRepositoryToGitHubWebhook\"}],\"dbName\":\"github_webhooks\"},\"GitHubWebhookDelivery\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deliveryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processed\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"GitHubActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repository\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GitHubActivityToUser\"}],\"dbName\":\"github_activities\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

