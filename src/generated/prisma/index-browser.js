
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  features: 'features',
  isActive: 'isActive',
  stripePriceId: 'stripePriceId',
  maxProjects: 'maxProjects',
  maxConnections: 'maxConnections',
  maxTeamMembers: 'maxTeamMembers',
  hasAdvancedAI: 'hasAdvancedAI',
  hasAnalytics: 'hasAnalytics',
  hasPrioritySupport: 'hasPrioritySupport',
  hasApiAccess: 'hasApiAccess',
  dailyRefreshLimit: 'dailyRefreshLimit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  nextBillingDate: 'nextBillingDate',
  gracePeriodEnd: 'gracePeriodEnd',
  lastPaymentDate: 'lastPaymentDate',
  failedPaymentCount: 'failedPaymentCount',
  autoRenew: 'autoRenew',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paidAt: 'paidAt',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  emailVerified: 'emailVerified',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  profilePictureUrl: 'profilePictureUrl',
  bio: 'bio',
  location: 'location',
  timezone: 'timezone',
  website: 'website',
  githubUrl: 'githubUrl',
  linkedinUrl: 'linkedinUrl',
  role: 'role',
  accountType: 'accountType',
  isActive: 'isActive',
  isBanned: 'isBanned',
  bannedUntil: 'bannedUntil',
  banReason: 'banReason',
  profileVisibility: 'profileVisibility',
  showEmail: 'showEmail',
  showLocation: 'showLocation',
  allowMessages: 'allowMessages',
  reputationScore: 'reputationScore',
  totalContributions: 'totalContributions',
  profileCompleted: 'profileCompleted',
  isOnline: 'isOnline',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSuggestionCacheScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectIdeas: 'projectIdeas',
  skillSuggestions: 'skillSuggestions',
  lastGenerated: 'lastGenerated',
  isValid: 'isValid'
};

exports.Prisma.UserSimilarCacheScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  data: 'data',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentSection: 'currentSection',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ExternalProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  username: 'username',
  url: 'url',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExternalProfileStatsScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  provider: 'provider',
  statsType: 'statsType',
  value: 'value',
  metadata: 'metadata',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.AccountStatsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  provider: 'provider',
  statsType: 'statsType',
  value: 'value',
  metadata: 'metadata',
  lastUpdated: 'lastUpdated',
  userId: 'userId'
};

exports.Prisma.LinkedInProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  linkedinId: 'linkedinId',
  firstName: 'firstName',
  lastName: 'lastName',
  headline: 'headline',
  summary: 'summary',
  industry: 'industry',
  location: 'location',
  profilePictureUrl: 'profilePictureUrl',
  bannerPictureUrl: 'bannerPictureUrl',
  publicProfileUrl: 'publicProfileUrl',
  vanityName: 'vanityName',
  isActive: 'isActive',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInExperienceScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  experienceId: 'experienceId',
  title: 'title',
  companyName: 'companyName',
  companyId: 'companyId',
  location: 'location',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  companyLogoUrl: 'companyLogoUrl',
  companyUrl: 'companyUrl',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInEducationScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  educationId: 'educationId',
  schoolName: 'schoolName',
  schoolId: 'schoolId',
  degree: 'degree',
  fieldOfStudy: 'fieldOfStudy',
  startDate: 'startDate',
  endDate: 'endDate',
  grade: 'grade',
  activities: 'activities',
  description: 'description',
  schoolLogoUrl: 'schoolLogoUrl',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInSkillScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  skillId: 'skillId',
  name: 'name',
  endorsements: 'endorsements',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInConnectionScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  connectionId: 'connectionId',
  firstName: 'firstName',
  lastName: 'lastName',
  headline: 'headline',
  profilePictureUrl: 'profilePictureUrl',
  publicProfileUrl: 'publicProfileUrl',
  industry: 'industry',
  location: 'location',
  isActive: 'isActive',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInPostScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  postId: 'postId',
  text: 'text',
  authorName: 'authorName',
  authorHeadline: 'authorHeadline',
  authorProfileUrl: 'authorProfileUrl',
  authorPictureUrl: 'authorPictureUrl',
  postType: 'postType',
  mediaUrls: 'mediaUrls',
  articleUrl: 'articleUrl',
  articleTitle: 'articleTitle',
  articleDescription: 'articleDescription',
  articleImageUrl: 'articleImageUrl',
  likesCount: 'likesCount',
  commentsCount: 'commentsCount',
  sharesCount: 'sharesCount',
  publishedAt: 'publishedAt',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkedInActivityScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  type: 'type',
  action: 'action',
  title: 'title',
  description: 'description',
  url: 'url',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.LinkedInCompanyScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  industry: 'industry',
  companySize: 'companySize',
  website: 'website',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl',
  location: 'location',
  foundedYear: 'foundedYear',
  employeeCount: 'employeeCount',
  followersCount: 'followersCount',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  device: 'device',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  isActive: 'isActive',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionActivityScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  osName: 'osName',
  osVersion: 'osVersion',
  browserName: 'browserName',
  browserVersion: 'browserVersion',
  isTrusted: 'isTrusted',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  category: 'category',
  proficiencyLevel: 'proficiencyLevel',
  isVerified: 'isVerified',
  yearsExperience: 'yearsExperience',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EndorsementScalarFieldEnum = {
  id: 'id',
  skillId: 'skillId',
  giverId: 'giverId',
  message: 'message',
  receiverId: 'receiverId',
  createdAt: 'createdAt'
};

exports.Prisma.ExperienceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  company: 'company',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  responsibilities: 'responsibilities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institution: 'institution',
  degree: 'degree',
  fieldOfStudy: 'fieldOfStudy',
  startDate: 'startDate',
  endDate: 'endDate',
  grade: 'grade',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  shortDesc: 'shortDesc',
  ownerId: 'ownerId',
  status: 'status',
  visibility: 'visibility',
  techStack: 'techStack',
  categories: 'categories',
  tags: 'tags',
  difficultyLevel: 'difficultyLevel',
  estimatedHours: 'estimatedHours',
  maxCollaborators: 'maxCollaborators',
  githubUrl: 'githubUrl',
  liveUrl: 'liveUrl',
  designUrl: 'designUrl',
  documentUrl: 'documentUrl',
  thumbnailUrl: 'thumbnailUrl',
  images: 'images',
  isRecruiting: 'isRecruiting',
  recruitmentMsg: 'recruitmentMsg',
  requiredSkills: 'requiredSkills',
  preferredTimezone: 'preferredTimezone',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  forkCount: 'forkCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectCollaboratorScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assigneeId: 'assigneeId',
  creatorId: 'creatorId',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  tags: 'tags',
  labels: 'labels',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  status: 'status',
  type: 'type',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConnectionPrivacyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  connectionPrivacyLevel: 'connectionPrivacyLevel',
  connectionRequestLevel: 'connectionRequestLevel',
  hideConnections: 'hideConnections',
  autoDeclineRequests: 'autoDeclineRequests',
  blockedUserIds: 'blockedUserIds',
  profileVisibility: 'profileVisibility',
  allowMessages: 'allowMessages',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  emoji: 'emoji',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReadScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.ChatSettingsScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  allowFileSharing: 'allowFileSharing',
  allowReactions: 'allowReactions',
  allowPolls: 'allowPolls',
  muteNotifications: 'muteNotifications',
  autoDeleteAfter: 'autoDeleteAfter',
  maxParticipants: 'maxParticipants',
  isPublic: 'isPublic',
  inviteCode: 'inviteCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  projectId: 'projectId',
  isActive: 'isActive',
  lastMessageId: 'lastMessageId',
  lastMessageAt: 'lastMessageAt',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatParticipantScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive',
  isAdmin: 'isAdmin'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  type: 'type',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  attachments: 'attachments',
  replyToId: 'replyToId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  category: 'category',
  points: 'points',
  isActive: 'isActive',
  criteria: 'criteria',
  createdAt: 'createdAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.ForumCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  color: 'color',
  icon: 'icon',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  slug: 'slug',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  replyCount: 'replyCount',
  isPinned: 'isPinned',
  isLocked: 'isLocked',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumReplyScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  organizerId: 'organizerId',
  startDate: 'startDate',
  endDate: 'endDate',
  timezone: 'timezone',
  location: 'location',
  virtualLink: 'virtualLink',
  isVirtual: 'isVirtual',
  maxAttendees: 'maxAttendees',
  agenda: 'agenda',
  requirements: 'requirements',
  tags: 'tags',
  bannerUrl: 'bannerUrl',
  thumbnailUrl: 'thumbnailUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventParticipantScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  status: 'status',
  registeredAt: 'registeredAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  priority: 'priority',
  category: 'category',
  isRead: 'isRead',
  readAt: 'readAt',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  senderId: 'senderId',
  expiresAt: 'expiresAt',
  scheduledAt: 'scheduledAt',
  deliveredAt: 'deliveredAt',
  deliveryMethod: 'deliveryMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category',
  inAppEnabled: 'inAppEnabled',
  emailEnabled: 'emailEnabled',
  pushEnabled: 'pushEnabled',
  smsEnabled: 'smsEnabled',
  digestFrequency: 'digestFrequency',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  priority: 'priority',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  reportedId: 'reportedId',
  type: 'type',
  reason: 'reason',
  details: 'details',
  status: 'status',
  adminNotes: 'adminNotes',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  key: 'key',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.PlatformStatsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  newUsers: 'newUsers',
  totalProjects: 'totalProjects',
  activeProjects: 'activeProjects',
  newProjects: 'newProjects',
  totalConnections: 'totalConnections',
  newConnections: 'newConnections',
  totalMessages: 'totalMessages',
  newMessages: 'newMessages',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.LeetCodeQuestionScalarFieldEnum = {
  id: 'id',
  leetcodeId: 'leetcodeId',
  url: 'url',
  title: 'title',
  difficulty: 'difficulty',
  acceptance: 'acceptance',
  frequency: 'frequency',
  companyId: 'companyId',
  timeCategories: 'timeCategories'
};

exports.Prisma.UserQuestionProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  status: 'status',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubAppInstallationScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  installationId: 'installationId',
  githubAccountId: 'githubAccountId',
  accountLogin: 'accountLogin',
  accountType: 'accountType',
  permissions: 'permissions',
  events: 'events',
  accessTokensUrl: 'accessTokensUrl',
  repositoriesUrl: 'repositoriesUrl',
  htmlUrl: 'htmlUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubRepositoryScalarFieldEnum = {
  id: 'id',
  installationId: 'installationId',
  repoId: 'repoId',
  name: 'name',
  fullName: 'fullName',
  description: 'description',
  private: 'private',
  htmlUrl: 'htmlUrl',
  cloneUrl: 'cloneUrl',
  sshUrl: 'sshUrl',
  defaultBranch: 'defaultBranch',
  language: 'language',
  languages: 'languages',
  topics: 'topics',
  stargazersCount: 'stargazersCount',
  watchersCount: 'watchersCount',
  forksCount: 'forksCount',
  openIssuesCount: 'openIssuesCount',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pushedAt: 'pushedAt',
  lastSynced: 'lastSynced'
};

exports.Prisma.GitHubCommitScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  sha: 'sha',
  message: 'message',
  authorName: 'authorName',
  authorEmail: 'authorEmail',
  authorDate: 'authorDate',
  committerName: 'committerName',
  committerEmail: 'committerEmail',
  committerDate: 'committerDate',
  htmlUrl: 'htmlUrl',
  stats: 'stats',
  files: 'files',
  createdAt: 'createdAt'
};

exports.Prisma.GitHubIssueScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  issueNumber: 'issueNumber',
  title: 'title',
  body: 'body',
  state: 'state',
  author: 'author',
  assignees: 'assignees',
  labels: 'labels',
  milestone: 'milestone',
  htmlUrl: 'htmlUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt',
  lastSynced: 'lastSynced'
};

exports.Prisma.GitHubPullRequestScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  prNumber: 'prNumber',
  title: 'title',
  body: 'body',
  state: 'state',
  author: 'author',
  assignees: 'assignees',
  reviewers: 'reviewers',
  labels: 'labels',
  milestone: 'milestone',
  baseBranch: 'baseBranch',
  headBranch: 'headBranch',
  htmlUrl: 'htmlUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt',
  mergedAt: 'mergedAt',
  lastSynced: 'lastSynced'
};

exports.Prisma.GitHubWebhookScalarFieldEnum = {
  id: 'id',
  installationId: 'installationId',
  repositoryId: 'repositoryId',
  webhookId: 'webhookId',
  name: 'name',
  events: 'events',
  config: 'config',
  isActive: 'isActive',
  lastDelivery: 'lastDelivery',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubWebhookDeliveryScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  deliveryId: 'deliveryId',
  payload: 'payload',
  createdAt: 'createdAt',
  processed: 'processed'
};

exports.Prisma.GitHubActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  action: 'action',
  repository: 'repository',
  title: 'title',
  description: 'description',
  url: 'url',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PlanType = exports.$Enums.PlanType = {
  FREE: 'FREE',
  BASIC: 'BASIC',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  UNPAID: 'UNPAID',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED',
  EXPIRED: 'EXPIRED',
  GRACE_PERIOD: 'GRACE_PERIOD'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.AccountType = exports.$Enums.AccountType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY',
  EDUCATIONAL: 'EDUCATIONAL'
};

exports.SkillCategory = exports.$Enums.SkillCategory = {
  PROGRAMMING_LANGUAGE: 'PROGRAMMING_LANGUAGE',
  FRAMEWORK: 'FRAMEWORK',
  DATABASE: 'DATABASE',
  CLOUD_PLATFORM: 'CLOUD_PLATFORM',
  DEVOPS_TOOL: 'DEVOPS_TOOL',
  DESIGN_TOOL: 'DESIGN_TOOL',
  PROJECT_MANAGEMENT: 'PROJECT_MANAGEMENT',
  SOFT_SKILL: 'SOFT_SKILL',
  OTHER: 'OTHER'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.ProjectVisibility = exports.$Enums.ProjectVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY'
};

exports.CollaboratorRole = exports.$Enums.CollaboratorRole = {
  OWNER: 'OWNER',
  CO_OWNER: 'CO_OWNER',
  DEVELOPER: 'DEVELOPER',
  DESIGNER: 'DESIGNER',
  TESTER: 'TESTER',
  MENTOR: 'MENTOR',
  VIEWER: 'VIEWER'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  IN_REVIEW: 'IN_REVIEW',
  DONE: 'DONE',
  CANCELLED: 'CANCELLED'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  BLOCKED: 'BLOCKED'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  COLLABORATOR: 'COLLABORATOR',
  MENTOR: 'MENTOR',
  MENTEE: 'MENTEE',
  FRIEND: 'FRIEND',
  COLLEAGUE: 'COLLEAGUE',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.ConnectionPrivacyLevel = exports.$Enums.ConnectionPrivacyLevel = {
  EVERYONE: 'EVERYONE',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY',
  MUTUAL_CONNECTIONS: 'MUTUAL_CONNECTIONS',
  NOBODY: 'NOBODY'
};

exports.ConnectionRequestLevel = exports.$Enums.ConnectionRequestLevel = {
  EVERYONE: 'EVERYONE',
  VERIFIED_ONLY: 'VERIFIED_ONLY',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY',
  NOBODY: 'NOBODY'
};

exports.ChatType = exports.$Enums.ChatType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP',
  PROJECT: 'PROJECT'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  CODE: 'CODE',
  SYSTEM: 'SYSTEM',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  LOCATION: 'LOCATION',
  CONTACT: 'CONTACT',
  POLL: 'POLL',
  REACTION: 'REACTION'
};

exports.EventType = exports.$Enums.EventType = {
  HACKATHON: 'HACKATHON',
  MEETUP: 'MEETUP',
  WORKSHOP: 'WORKSHOP',
  WEBINAR: 'WEBINAR',
  CONFERENCE: 'CONFERENCE',
  NETWORKING: 'NETWORKING'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ParticipantStatus = exports.$Enums.ParticipantStatus = {
  REGISTERED: 'REGISTERED',
  CONFIRMED: 'CONFIRMED',
  ATTENDED: 'ATTENDED',
  NO_SHOW: 'NO_SHOW',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  CONNECTION_REQUEST: 'CONNECTION_REQUEST',
  CONNECTION_ACCEPTED: 'CONNECTION_ACCEPTED',
  CONNECTION_DECLINED: 'CONNECTION_DECLINED',
  CONNECTION_BLOCKED: 'CONNECTION_BLOCKED',
  PROJECT_INVITATION: 'PROJECT_INVITATION',
  PROJECT_JOINED: 'PROJECT_JOINED',
  PROJECT_LEFT: 'PROJECT_LEFT',
  PROJECT_UPDATED: 'PROJECT_UPDATED',
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  TASK_COMPLETED: 'TASK_COMPLETED',
  TASK_COMMENTED: 'TASK_COMMENTED',
  TASK_DUE_SOON: 'TASK_DUE_SOON',
  COMMENT_ADDED: 'COMMENT_ADDED',
  MESSAGE_RECEIVED: 'MESSAGE_RECEIVED',
  MESSAGE_MENTIONED: 'MESSAGE_MENTIONED',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  EVENT_REMINDER: 'EVENT_REMINDER',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  PROFILE_VIEWED: 'PROFILE_VIEWED'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationCategory = exports.$Enums.NotificationCategory = {
  CONNECTION: 'CONNECTION',
  PROJECT: 'PROJECT',
  TASK: 'TASK',
  MESSAGE: 'MESSAGE',
  ACHIEVEMENT: 'ACHIEVEMENT',
  SYSTEM: 'SYSTEM',
  EVENT: 'EVENT'
};

exports.NotificationDeliveryMethod = exports.$Enums.NotificationDeliveryMethod = {
  IN_APP: 'IN_APP',
  EMAIL: 'EMAIL',
  PUSH: 'PUSH',
  SMS: 'SMS'
};

exports.DigestFrequency = exports.$Enums.DigestFrequency = {
  IMMEDIATE: 'IMMEDIATE',
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  NEVER: 'NEVER'
};

exports.ReportType = exports.$Enums.ReportType = {
  SPAM: 'SPAM',
  HARASSMENT: 'HARASSMENT',
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  FAKE_PROFILE: 'FAKE_PROFILE',
  COPYRIGHT_VIOLATION: 'COPYRIGHT_VIOLATION',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED'
};

exports.TimeCategory = exports.$Enums.TimeCategory = {
  ALL: 'ALL',
  THIRTY_DAYS: 'THIRTY_DAYS',
  THREE_MONTHS: 'THREE_MONTHS',
  SIX_MONTHS: 'SIX_MONTHS',
  MORE_THAN_SIX_MONTHS: 'MORE_THAN_SIX_MONTHS'
};

exports.QuestionStatus = exports.$Enums.QuestionStatus = {
  UNSOLVED: 'UNSOLVED',
  ATTEMPTED: 'ATTEMPTED',
  SOLVED: 'SOLVED',
  BOOKMARKED: 'BOOKMARKED'
};

exports.Prisma.ModelName = {
  Plan: 'Plan',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  User: 'User',
  UserSuggestionCache: 'UserSuggestionCache',
  UserSimilarCache: 'UserSimilarCache',
  ProfileProgress: 'ProfileProgress',
  Account: 'Account',
  ExternalProfile: 'ExternalProfile',
  ExternalProfileStats: 'ExternalProfileStats',
  AccountStats: 'AccountStats',
  LinkedInProfile: 'LinkedInProfile',
  LinkedInExperience: 'LinkedInExperience',
  LinkedInEducation: 'LinkedInEducation',
  LinkedInSkill: 'LinkedInSkill',
  LinkedInConnection: 'LinkedInConnection',
  LinkedInPost: 'LinkedInPost',
  LinkedInActivity: 'LinkedInActivity',
  LinkedInCompany: 'LinkedInCompany',
  Session: 'Session',
  SessionActivity: 'SessionActivity',
  UserDevice: 'UserDevice',
  VerificationToken: 'VerificationToken',
  Skill: 'Skill',
  Endorsement: 'Endorsement',
  Experience: 'Experience',
  Education: 'Education',
  Project: 'Project',
  ProjectCollaborator: 'ProjectCollaborator',
  Task: 'Task',
  Milestone: 'Milestone',
  Comment: 'Comment',
  Connection: 'Connection',
  ConnectionPrivacy: 'ConnectionPrivacy',
  MessageReaction: 'MessageReaction',
  MessageRead: 'MessageRead',
  ChatSettings: 'ChatSettings',
  Chat: 'Chat',
  ChatParticipant: 'ChatParticipant',
  Message: 'Message',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  ForumCategory: 'ForumCategory',
  ForumPost: 'ForumPost',
  ForumReply: 'ForumReply',
  Event: 'Event',
  EventParticipant: 'EventParticipant',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  NotificationTemplate: 'NotificationTemplate',
  Report: 'Report',
  ApiKey: 'ApiKey',
  UserActivity: 'UserActivity',
  PlatformStats: 'PlatformStats',
  Company: 'Company',
  LeetCodeQuestion: 'LeetCodeQuestion',
  UserQuestionProgress: 'UserQuestionProgress',
  GitHubAppInstallation: 'GitHubAppInstallation',
  GitHubRepository: 'GitHubRepository',
  GitHubCommit: 'GitHubCommit',
  GitHubIssue: 'GitHubIssue',
  GitHubPullRequest: 'GitHubPullRequest',
  GitHubWebhook: 'GitHubWebhook',
  GitHubWebhookDelivery: 'GitHubWebhookDelivery',
  GitHubActivity: 'GitHubActivity'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
